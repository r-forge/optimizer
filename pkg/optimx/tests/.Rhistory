ansconf0c<-optimr(xx,maxfn, gr="grcentral", method="Rvmmin", control=list(maximize=TRUE, trace=2))
print(ansconf0c) # should work OK
ansconf0n<-optimr(xx,maxfn, gr="grnd", method="Rvmmin", control=list(maximize=TRUE, trace=2))
print(ansconf0n) # should work OK
ansconf1<-optimr(xx,maxfn, gr="grfwd", method="Rvmmin", control=list(maximize=TRUE, fnscale=1))
print(ansconf1) # should work OK
ansconf2<-optimr(xx,maxfn, gr="grfwd", method="Rvmmin", control=list(maximize=FALSE, fnscale=-1))
print(ansconf2) # should work OK
maxall <- opm(xx, maxfn, gr=maxfn.g, method="ALL", control=list(maximize=TRUE))
summary(maxall, order=value)
# maxfn.R
##  author: John C. Nash
# rm(list=ls())
cat("maxfn.R -- test that maximize=TRUE works correctly\n")
require(optimx)
sessionInfo()
maxfn<-function(x) {# fn to be MAXIMIZED
# max = 10 at 1:n
n<-length(x)
ss<-seq(1,n)
f<-10-sum((x-ss)^2)
f
}
maxfn.g <- function(x) { # gradient
n <- length(x)
ss<-seq(1,n)
gg <- -2*(x-ss)
gg
}
maxfn.h <- function(x) { # gradient
n <- length(x)
hh<-rep(-2, n)
hh <- diag(hh)
hh
}
negmaxfn<-function(x) {# explicit negative of maxfn
f<-(-1)*maxfn(x)
return(f)
}
negmaxfn.g<-function(x) {# explicit negative of maxfn
gg<-(-1)*maxfn.g(x)
gg
}
negmaxfn.h<-function(x) {# explicit negative of maxfn
hh<-(-1)*maxfn.h(x)
hh
}
n<-4
xx<-rep(1,n) # start at all 1s
rv0 <- Rvmmin(xx, maxfn, maxfn.g, control=list(maximize=TRUE, trace=4))
rv0
# This fails but should not??
rv0f <- Rvmmin(xx, maxfn, "grfwd", control=list(maximize=TRUE, trace=4))
rv0f <- Rvmmin(xx, maxfn, "grfwd", control=list(maximize=TRUE, trace=4))
rv0 <- Rvmmin(xx, maxfn, maxfn.g, control=list(maximize=TRUE, trace=2))
rv0
rv0f <- Rvmmin(xx, maxfn, "grfwd", control=list(maximize=TRUE, trace=2))
rv0f
nrv0 <- Rvmmin(xx, negmaxfn, negmaxfn.g, control=list(trace=4))
nrv0
nrv0f <- Rvmmin(xx, negmaxfn, "grfwd", control=list(trace=4))
nrv0f
# Conflicting controls -- 'maximize' takes precedence over 'fnscale'
ansconf0<-optimr(xx,maxfn, gr=maxfn.g, method="Rvmmin", control=list(maximize=TRUE, trace=2))
print(ansconf0) # should work OK
## Fails!!
ansconf0f<-optimr(xx,maxfn, gr="grfwd", method="Rvmmin", control=list(maximize=TRUE, trace=4))
print(ansconf0f) # should work OK
ansconf0c<-optimr(xx,maxfn, gr="grcentral", method="Rvmmin", control=list(maximize=TRUE, trace=2))
print(ansconf0c) # should work OK
ansconf0n<-optimr(xx,maxfn, gr="grnd", method="Rvmmin", control=list(maximize=TRUE, trace=2))
print(ansconf0n) # should work OK
ansconf1<-optimr(xx,maxfn, gr="grfwd", method="Rvmmin", control=list(maximize=TRUE, fnscale=1))
print(ansconf1) # should work OK
ansconf2<-optimr(xx,maxfn, gr="grfwd", method="Rvmmin", control=list(maximize=FALSE, fnscale=-1))
print(ansconf2) # should work OK
ansconf2<-optimr(xx,maxfn, gr="grfwd", method="Rvmmin", control=list(maximize=FALSE, fnscale=-1))
print(ansconf2) # should work OK
# maxfn.R
##  author: John C. Nash
# rm(list=ls())
cat("maxfn.R -- test that maximize=TRUE works correctly\n")
require(optimx)
sessionInfo()
maxfn<-function(x) {# fn to be MAXIMIZED
# max = 10 at 1:n
n<-length(x)
ss<-seq(1,n)
f<-10-sum((x-ss)^2)
f
}
maxfn.g <- function(x) { # gradient
n <- length(x)
ss<-seq(1,n)
gg <- -2*(x-ss)
gg
}
maxfn.h <- function(x) { # gradient
n <- length(x)
hh<-rep(-2, n)
hh <- diag(hh)
hh
}
negmaxfn<-function(x) {# explicit negative of maxfn
f<-(-1)*maxfn(x)
return(f)
}
negmaxfn.g<-function(x) {# explicit negative of maxfn
gg<-(-1)*maxfn.g(x)
gg
}
negmaxfn.h<-function(x) {# explicit negative of maxfn
hh<-(-1)*maxfn.h(x)
hh
}
n<-4
xx<-rep(1,n) # start at all 1s
rv0 <- Rvmmin(xx, maxfn, maxfn.g, control=list(maximize=TRUE, trace=2))
rv0
rv0f <- Rvmmin(xx, maxfn, "grfwd", control=list(maximize=TRUE, trace=2))
rv0f
nrv0 <- Rvmmin(xx, negmaxfn, negmaxfn.g, control=list(trace=4))
nrv0
nrv0f <- Rvmmin(xx, negmaxfn, "grfwd", control=list(trace=4))
nrv0f
# Conflicting controls -- 'maximize' takes precedence over 'fnscale'
ansconf0<-optimr(xx,maxfn, gr=maxfn.g, method="Rvmmin", control=list(maximize=TRUE, trace=2))
print(ansconf0) # should work OK
# Conflicting controls -- 'maximize' takes precedence over 'fnscale'
ansconf0<-optimr(xx,maxfn, gr=maxfn.g, method="Rvmmin", control=list(maximize=TRUE, trace=2))
warnings()
# maxfn.R
##  author: John C. Nash
# rm(list=ls())
cat("maxfn.R -- test that maximize=TRUE works correctly\n")
require(optimx)
sessionInfo()
maxfn<-function(x) {# fn to be MAXIMIZED
# max = 10 at 1:n
n<-length(x)
ss<-seq(1,n)
f<-10-sum((x-ss)^2)
f
}
maxfn.g <- function(x) { # gradient
n <- length(x)
ss<-seq(1,n)
gg <- -2*(x-ss)
gg
}
maxfn.h <- function(x) { # gradient
n <- length(x)
hh<-rep(-2, n)
hh <- diag(hh)
hh
}
negmaxfn<-function(x) {# explicit negative of maxfn
f<-(-1)*maxfn(x)
return(f)
}
negmaxfn.g<-function(x) {# explicit negative of maxfn
gg<-(-1)*maxfn.g(x)
gg
}
negmaxfn.h<-function(x) {# explicit negative of maxfn
hh<-(-1)*maxfn.h(x)
hh
}
n<-4
xx<-rep(1,n) # start at all 1s
rv0 <- Rvmmin(xx, maxfn, maxfn.g, control=list(maximize=TRUE, trace=2))
rv0
rv0f <- Rvmmin(xx, maxfn, "grfwd", control=list(maximize=TRUE, trace=2))
rv0f
nrv0 <- Rvmmin(xx, negmaxfn, negmaxfn.g, control=list(trace=4))
nrv0
nrv0f <- Rvmmin(xx, negmaxfn, "grfwd", control=list(trace=4))
nrv0f
# Conflicting controls -- 'maximize' takes precedence over 'fnscale'
ansconf0<-optimr(xx,maxfn, gr=maxfn.g, method="Rvmmin", control=list(maximize=TRUE, trace=2))
print(ansconf0) # should work OK
ansconf0f<-optimr(xx,maxfn, gr="grfwd", method="Rvmmin", control=list(maximize=TRUE, trace=4))
print(ansconf0f) # should work OK
ansconf0c<-optimr(xx,maxfn, gr="grcentral", method="Rvmmin", control=list(maximize=TRUE, trace=2))
print(ansconf0c) # should work OK
ansconf0n<-optimr(xx,maxfn, gr="grnd", method="Rvmmin", control=list(maximize=TRUE, trace=2))
print(ansconf0n) # should work OK
ansconf1<-optimr(xx,maxfn, gr="grfwd", method="Rvmmin", control=list(maximize=TRUE, fnscale=1))
print(ansconf1) # should work OK
# FAILS!
ansconf2<-optimr(xx,maxfn, gr="grfwd", method="Rvmmin", control=list(maximize=FALSE, fnscale=-1))
print(ansconf2) # should work OK
# Warning
ansconf2<-optimr(xx,maxfn, gr="grfwd", method="Rvmmin", control=list(maximize=FALSE, fnscale=-1))
print(ansconf2) # should work OK
maxall <- opm(xx, maxfn, gr=maxfn.g, method="ALL", control=list(maximize=TRUE))
summary(maxall, order=value)
#
# cat("WARNING -- this example should FAIL\n")
# cat("maximize=TRUE is NOT set up in hjn()\n")
# # 160706 -- not set up to maximize, except through optimr perhaps
# n<-4
# xx<-rep(1,n)
# ansmax<-try(hjn(xx,maxfn, control=list(maximize=TRUE,trace=1, maxit=10, maxfeval=2000)))
# print(ansmax)
#
# cat("\nTry to maximize through optimr()\n")
anshjno<-try(optimr(xx,maxfn, method="hjn", control=list(maximize=TRUE,trace=1, maxit=10, maxfeval=2000)))
print(anshjno)
xxh<-anshjno$par
xxhkkt<-kktchk(xxh, maxfn, "grcentral", maximize=TRUE, control=list(trace=2))
# maxfn.R
##  author: John C. Nash
# rm(list=ls())
cat("maxfn.R -- test that maximize=TRUE works correctly\n")
require(optimx)
sessionInfo()
maxfn<-function(x) {# fn to be MAXIMIZED
# max = 10 at 1:n
n<-length(x)
ss<-seq(1,n)
f<-10-sum((x-ss)^2)
f
}
maxfn.g <- function(x) { # gradient
n <- length(x)
ss<-seq(1,n)
gg <- -2*(x-ss)
gg
}
maxfn.h <- function(x) { # gradient
n <- length(x)
hh<-rep(-2, n)
hh <- diag(hh)
hh
}
negmaxfn<-function(x) {# explicit negative of maxfn
f<-(-1)*maxfn(x)
return(f)
}
negmaxfn.g<-function(x) {# explicit negative of maxfn
gg<-(-1)*maxfn.g(x)
gg
}
negmaxfn.h<-function(x) {# explicit negative of maxfn
hh<-(-1)*maxfn.h(x)
hh
}
n<-4
xx<-rep(1,n) # start at all 1s
rv0 <- Rvmmin(xx, maxfn, maxfn.g, control=list(maximize=TRUE, trace=2))
rv0
rv0f <- Rvmmin(xx, maxfn, "grfwd", control=list(maximize=TRUE, trace=2))
rv0f
nrv0 <- Rvmmin(xx, negmaxfn, negmaxfn.g, control=list(trace=4))
nrv0
nrv0f <- Rvmmin(xx, negmaxfn, "grfwd", control=list(trace=4))
nrv0f
# Conflicting controls -- 'maximize' takes precedence over 'fnscale'
ansconf0<-optimr(xx,maxfn, gr=maxfn.g, method="Rvmmin", control=list(maximize=TRUE, trace=2))
proptimr(ansconf0) # should work OK
ansconf0f<-optimr(xx,maxfn, gr="grfwd", method="Rvmmin", control=list(maximize=TRUE, trace=4))
proptimr(ansconf0f) # should work OK
ansconf0c<-optimr(xx,maxfn, gr="grcentral", method="Rvmmin", control=list(maximize=TRUE, trace=2))
proptimr(ansconf0c) # should work OK
ansconf0n<-optimr(xx,maxfn, gr="grnd", method="Rvmmin", control=list(maximize=TRUE, trace=2))
proptimr(ansconf0n) # should work OK
ansconf1<-optimr(xx,maxfn, gr="grfwd", method="Rvmmin", control=list(maximize=TRUE, fnscale=1))
proptimr(ansconf1) # should work OK
# Warning
ansconf2<-optimr(xx,maxfn, gr="grfwd", method="Rvmmin", control=list(maximize=FALSE, fnscale=-1))
proptimr(ansconf2) # should work OK
proptimr(ansconf2) # should work OK
maxall <- opm(xx, maxfn, gr=maxfn.g, method="ALL", control=list(maximize=TRUE))
summary(maxall, order=value)
#
# cat("WARNING -- this example should FAIL\n")
# cat("maximize=TRUE is NOT set up in hjn()\n")
# # 160706 -- not set up to maximize, except through optimr perhaps
# n<-4
# xx<-rep(1,n)
# ansmax<-try(hjn(xx,maxfn, control=list(maximize=TRUE,trace=1, maxit=10, maxfeval=2000)))
# print(ansmax)
#
# cat("\nTry to maximize through optimr()\n")
anshjno<-try(optimr(xx,maxfn, method="hjn", control=list(maximize=TRUE,trace=1, maxit=10, maxfeval=2000)))
print(anshjno)
xxh<-anshjno$par
xxhkkt<-kktchk(xxh, maxfn, "grcentral", maximize=TRUE, control=list(trace=2))
#
#
# cat("using the negmax function should give same parameters\n")
#
# cat("using the negmax function should give same parameters\n")
# ansnegmax<-hjn(xx,negmaxfn, control=list(trace=1, maxit=10, maxfeval=2000))
#
# cat("using the negmax function should give same parameters\n")
# ansnegmax<-hjn(xx,negmaxfn, control=list(trace=1, maxit=10, maxfeval=2000))
# print(ansnegmax)
# argclash.R -- Try to work around dotargs that have a name that clashes
#     with variable names in function calls
# J C Nash 2021-12-16
# Trying to fix issue raised in
# https://stackoverflow.com/questions/69033754/maximum-likelihood-estimation-of-three-parameter-reverse-weibull-model-implement/70382556#70382556
# WARNING: It is NOT certain that all name clashes between dotargs and other names
# in functions in optimx will be avoided by the current mechanisms.
# This script does, however, show some tests
rm(list=ls()) # In case we want to ensure clear workspace, delete first #
sqmod<-function(z, x){
nn<-length(z)
yy<-x^(1:nn)
f<-sum((yy-z)^2)
#   cat("Fv=",f," at ")
#   print(z)
f
}
sqmod.g <- function(z, x){
nn<-length(z)
yy<-x^(1:nn)
gg<- 2*(z - yy)
}
require(optimx)
require(numDeriv)
sessionInfo()
nn<-2
st<-rep(0.5, nn)
t2 <- optimx(st, fn=sqmod, x=2)
t2
o1 <- optim(st, fn=sqmod,  x=2)
t2 <- optimx(st, fn=sqmod, x=2)
# argclash.R -- Try to work around dotargs that have a name that clashes
#     with variable names in function calls
# J C Nash 2021-12-16
# Trying to fix issue raised in
# https://stackoverflow.com/questions/69033754/maximum-likelihood-estimation-of-three-parameter-reverse-weibull-model-implement/70382556#70382556
# WARNING: It is NOT certain that all name clashes between dotargs and other names
# in functions in optimx will be avoided by the current mechanisms.
# This script does, however, show some tests
rm(list=ls()) # In case we want to ensure clear workspace, delete first #
sqmod<-function(z, x){
nn<-length(z)
yy<-x^(1:nn)
f<-sum((yy-z)^2)
#   cat("Fv=",f," at ")
#   print(z)
f
}
sqmod.g <- function(z, x){
nn<-length(z)
yy<-x^(1:nn)
gg<- 2*(z - yy)
}
require(optimx)
require(numDeriv)
sessionInfo()
nn<-2
st<-rep(0.5, nn)
t2 <- optimx(st, fn=sqmod, x=2)
t2
o1 <- optim(st, fn=sqmod,  x=2)
o1
source("~/current/opx21/optimx/tests/argclash.R", echo=TRUE)
?grchk
# Try grchk
tgr <- grchk(st, ffn=sqmod, ggr=sqmod.g, trace=1, x=2)
# Try grchk
tgr <- grchk(xpar=st, ffn=sqmod, ggr=sqmod.g, trace=1, x=2)
# Try grchk -- get a clash??
tgr <- grchk(xpar=st, ffn=sqmod, ggr=sqmod.g, trace=1, x=2)
# Try grchk -- get a clash??
tgr <- grchk(xpar=st, ffn=sqmod, ggr=sqmod.g, trace=1, x=2)
# Try grchk -- get a clash??
tgr <- grchk(xpar=st, ffn=sqmod, ggr=sqmod.g, trace=1, x=2)
source("~/current/opx21/optimx/tests/argclash.R", echo=TRUE)
# Try grchk -- The argclash is fixed in the code.
tgr <- grchk(xpar=st, ffn=sqmod, ggr=sqmod.g, trace=1, x=2)
# Try grchk -- The argclash is fixed in the code.
tgr <- grchk(xpar=st, ffn=sqmod, ggr=sqmod.g, trace=2, x=2)
tgr
?hessian
?grchk
?grchk
?hesschk
?scalechk
source("~/current/opx21/optimx/R/optimx.R", echo=TRUE)
source("~/current/opx21/optimx/R/optimx.R", echo=TRUE)
?grchk
?hesschk
sessionInfo()
nn<-2
st<-rep(0.5, nn)
t2 <- optimx(st, fn=sqmod, x=2)
t2
o1 <- optim(st, fn=sqmod,  x=2)
o1
# Try grchk -- The argclash is fixed in the code.
tgr <- grchk(xpar=st, ffn=sqmod, ggr=sqmod.g, trace=2, x=2)
tgr
# One way that x gets into the dot arguments
xval <- 2
sqmod1 <- function(z){ sqmod(z, x=xval) }
# Another way
dots <- list(x=2)
str(dots)
sqmod2 <- function(z){ sqmod(z, unlist(dots)) }
# simple test
x <- c(1,3)
# Note that x is a listed argument (the 2nd) of numDeriv::grad()
tryg1 <- grad(sqmod1, x )
tryg1
eg1<-sqmod.g(z=x, x=xval)
eg1
cat("sqmod2 for x=2:", sqmod2(x), "\n")
nn<-2
st<-rep(0.5, nn)
t2 <- optimx(st, fn=sqmod, x=2)
# argclash.R -- Try to work around dotargs that have a name that clashes
#     with variable names in function calls
# J C Nash 2021-12-16
# Trying to fix issue raised in
# https://stackoverflow.com/questions/69033754/maximum-likelihood-estimation-of-three-parameter-reverse-weibull-model-implement/70382556#70382556
# WARNING: It is NOT certain that all name clashes between dotargs and other names
# in functions in optimx will be avoided by the current mechanisms.
# This script does, however, show some tests
rm(list=ls()) # In case we want to ensure clear workspace, delete first #
sqmod<-function(z, x){
nn<-length(z)
yy<-x^(1:nn)
f<-sum((yy-z)^2)
#   cat("Fv=",f," at ")
#   print(z)
f
}
sqmod.g <- function(z, x){
nn<-length(z)
yy<-x^(1:nn)
gg<- 2*(z - yy)
}
require(optimx)
require(numDeriv)
sessionInfo()
nn<-2
st<-rep(0.5, nn)
t2 <- optimx(st, fn=sqmod, x=2)
t2
o1 <- optim(st, fn=sqmod,  x=2)
o1
# Try grchk -- The argclash is fixed in the code.
tgr <- grchk(xpar=st, ffn=sqmod, ggr=sqmod.g, trace=2, x=2)
tgr
# One way that x gets into the dot arguments
xval <- 2
sqmod1 <- function(z){ sqmod(z, x=xval) }
# Another way
dots <- list(x=2)
str(dots)
sqmod2 <- function(z){ sqmod(z, unlist(dots)) }
# simple test
x <- c(1,3)
# Note that x is a listed argument (the 2nd) of numDeriv::grad()
tryg1 <- grad(sqmod1, x )
tryg1
eg1<-sqmod.g(z=x, x=xval)
eg1
cat("sqmod2 for x=2:", sqmod2(x), "\n")
tryg2 <- grad(sqmod2, x )
tryg2
x<-2.0
t2x <- optimx(st, fn=sqmod, x=x)
t2x
t2fm <- optimx(st, fn=sqmod, method="BFGS", x=2)
t2fm
t2fgm <- optimx(st, fn=sqmod, gr=sqmod.g, method="BFGS", x=2)
traceback()
traceback()
t2fgm <- optimx(st, fn=sqmod, gr=sqmod.g, method="BFGS", x=2)
t2fgm <- optimx(st, fn=sqmod, gr=sqmod.g, method="BFGS", x=2)
st
sqmod
t2fm <- optimx(st, fn=sqmod, method="BFGS", x=2)
t2fm
t2fgm <- optimx(st, fn=sqmod, gr=sqmod.g, method="BFGS", x=2)
source("~/current/opx21/optimx/R/optimx.setup.R", echo=TRUE)
# argclash.R -- Try to work around dotargs that have a name that clashes
#     with variable names in function calls
# J C Nash 2021-12-16
# Trying to fix issue raised in
# https://stackoverflow.com/questions/69033754/maximum-likelihood-estimation-of-three-parameter-reverse-weibull-model-implement/70382556#70382556
# WARNING: It is NOT certain that all name clashes between dotargs and other names
# in functions in optimx will be avoided by the current mechanisms.
# This script does, however, show some tests
rm(list=ls()) # In case we want to ensure clear workspace, delete first #
sqmod<-function(z, x){
nn<-length(z)
yy<-x^(1:nn)
f<-sum((yy-z)^2)
#   cat("Fv=",f," at ")
#   print(z)
f
}
sqmod.g <- function(z, x){
nn<-length(z)
yy<-x^(1:nn)
gg<- 2*(z - yy)
}
require(optimx)
require(numDeriv)
sessionInfo()
nn<-2
st<-rep(0.5, nn)
t2 <- optimx(st, fn=sqmod, x=2)
traceback()
