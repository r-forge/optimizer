\name{lbfgsb3}
\alias{lbfgsb3}
\title{Interfacing to Nocedal LBFGSB3 limited memory BFGS solver.
}
\description{
   Interfacing to Nocedal LBFGSB3 limited memory BFGS solver.
}
\usage{
   lbfgsb3(prm, fn, gr=NULL, lower=-Inf, upper=Inf, 
         control=list(), ...)
}
\arguments{
  \item{prm}{
     A parameter vector which gives the initial guesses to the parameters
     that will minimize \code{fn}. This can be named, for example, we could use
        prm=c(b1=1, b2=2.345, b3=0.123)
  }
  \item{fn}{
     A function that evaluates the objective function to be minimized.
  }
  \item{gr}{
     If present, a function that evaluates the gradient vector for 
     the objective function at the given parameterscomputing the elements of
     the sum of squares function at the set of parameters \code{start}. 
  }
  \item{lower}{
     Lower bounds on the parameters. If a single number, this will be applied to all
     parameters. Default -Inf.
  } 
  \item{upper}{
     Upper bounds on the parameters. If a single number, this will be applied to all
     parameters. Default Inf.
  } 
  \item{control}{ 
     A list of controls for the algorithm. These are:
     \describe{
      \item{\code{femax}}{Maximum function evaluations. }
      \item{\code{gemax}}{Maximum number of gradient evaluations. }
     }
  }
  \item{\dots}{
     Any data needed for computation of the objective function and gradient.
}

}
\details{
    To be added.

  info <- list(task = task, itask = itask, lsave = lsave, 
                icsave = icsave, dsave = dsave, isave = isave)

c     icsave is a working integer
c
c     lsave is a logical working array of dimension 4.
c       On exit with 'task' = NEW_X, the following information is 
c                                                             available:
c         If lsave(1) = .true.  then  the initial X has been replaced by
c                                     its projection in the feasible set;
c         If lsave(2) = .true.  then  the problem is constrained;
c         If lsave(3) = .true.  then  each variable has upper and lower
c                                     bounds;
c
c     isave is an integer working array of dimension 44.
c       On exit with 'task' = NEW_X, the following information is 
c                                                             available:
c         isave(22) = the total number of intervals explored in the 
c                         search of Cauchy points;
c         isave(26) = the total number of skipped BFGS updates before 
c                         the current iteration;
c         isave(30) = the number of current iteration;
c         isave(31) = the total number of BFGS updates prior the current
c                         iteration;
c         isave(33) = the number of intervals explored in the search of
c                         Cauchy point in the current iteration;
c         isave(34) = the total number of function and gradient 
c                         evaluations;
c         isave(36) = the number of function value or gradient
c                                  evaluations in the current iteration;
c         if isave(37) = 0  then the subspace argmin is within the box;
c         if isave(37) = 1  then the subspace argmin is beyond the box;
c         isave(38) = the number of free variables in the current
c                         iteration;
c         isave(39) = the number of active constraints in the current
c                         iteration;
c         n + 1 - isave(40) = the number of variables leaving the set of
c                           active constraints in the current iteration;
c         isave(41) = the number of variables entering the set of active
c                         constraints in the current iteration.
c
c     dsave is a double precision working array of dimension 29.
c       On exit with 'task' = NEW_X, the following information is
c                                                             available:
c         dsave(1) = current 'theta' in the BFGS matrix;
c         dsave(2) = f(x) in the previous iteration;
c         dsave(3) = factr*epsmch;
c         dsave(4) = 2-norm of the line search direction vector;
c         dsave(5) = the machine precision epsmch generated by the code;
c         dsave(7) = the accumulated time spent on searching for
c                                                         Cauchy points;
c         dsave(8) = the accumulated time spent on
c                                                 subspace minimization;
c         dsave(9) = the accumulated time spent on line search;
c         dsave(11) = the slope of the line search function at
c                                  the current point of line search;
c         dsave(12) = the maximum relative step length imposed in
c                                                           line search;
c         dsave(13) = the infinity norm of the projected gradient;
c         dsave(14) = the relative step length in the line search;
c         dsave(15) = the slope of the line search function at
c                                 the starting point of the line search;
c         dsave(16) = the square of the 2-norm of the line search
c                                                      direction vector.
c




}
\value{
  A list of the following items
  \item{prm}{A vector giving the parameter values at the supposed solution.}
  \item{f}{The value of the objective function at this set of parameters.}
  \item{g}{An estimate of the gradient of the objective at the solution.}
  \item{info}{A structure containing information on the disposition of the
       computation on return. See Details.}
}
\references{
%% ~put references to the literature/web site here ~
     Nocedal et al. (1994) 

     others!!

}
\author{
John C Nash <nashjc@uottawa.ca>
}
\note{
   Special notes, if any, will appear here.
}

\seealso{
    Packages \code{\link{optim}} and \code{optimx}.
}

\examples{
cat("Examples are to be added\n")

}
\keyword{ nonlinear parameter optimization }

