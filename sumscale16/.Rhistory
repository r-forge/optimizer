xy
sum(xy)
sqrt(sum(xy))
scale(xx)
xx <- c(1,2)
scale <- 1 + 2*4
scale
obj <- 2
xy <- xx/sqrt(9)
xy
prod(xy)
sum(log(xy))
sum(log(xx))
-sum(log(xx))+log(3)
-sum(log(xx))+log(9)
xy <- xx/sqrt(9)
sum(log(xx))
scale <- function(x) {sum( (1:n) * x^2)}
enew <- function(lx){
n <- length(lx)
x <- exp(lx)
obj <- log(scale) - sum(log(x))
}
library(optimrx)
strt <- (1:n)/(2*n)
lo <- c(rep(-100, (n-1)),strt[n])
up <- c(rep(100, (n-1)),strt[n])
amsk2 <- opm(strt, enll, enll.g, lower=lo, upper=up, method=mmth)
amsk2 <- summary(amsk2, order=value)
print(amsk2)
parm2 <- amsk2[1, 1:n]
parm2 <- parm2/sqrt(scale(parm2))
print(parm2)
library(optimrx)
strt <- (1:n)/(2*n)
scale <- function(x) {sum( (1:n) * x^2)}
enew <- function(lx){
n <- length(lx)
x <- exp(lx)
obj <- log(scale) - sum(log(x))
}
library(optimrx)
n <- 5
strt <- (1:n)/(2*n)
lo <- c(rep(-100, (n-1)),strt[n])
up <- c(rep(100, (n-1)),strt[n])
amsk2 <- opm(strt, enll, enll.g, lower=lo, upper=up, method=mmth)
amsk2 <- summary(amsk2, order=value)
print(amsk2)
mset<-c("L-BFGS-B", "spg", "nlm", "nlminb", "Rvmmin", "Rcgmin")
strt <- (1:n)/(2*n)
lo <- c(rep(-100, (n-1)),strt[n])
up <- c(rep(100, (n-1)),strt[n])
amsk2 <- opm(strt, enll, enll.g, lower=lo, upper=up, method=mmth)
amsk2 <- opm(strt, enll, enll.g, lower=lo, upper=up, method=mset)
amsk2 <- opm(strt, enll, enll.g, lower=lo, upper=up, method=mmth)
mmth<-c("Rvmmin", "Rcgmin")
strt <- (1:n)/(2*n)
lo <- c(rep(-100, (n-1)),strt[n])
up <- c(rep(100, (n-1)),strt[n])
amsk2 <- opm(strt, enll, enll.g, lower=lo, upper=up, method=mmth)
amsk2 <- summary(amsk2, order=value)
print(amsk2)
parm2 <- amsk2[1, 1:n]
parm2 <- parm2/sqrt(scale(parm2))
print(parm2)
cat("enew(parm2)=", enew(parm2),"\n")
print(exp(parm2))
print(parm2e)
parm2e<-exp(parm2)
print(parm2e)
cat("enew(parm2)=", enew(parm2),"\n")
scale <- function(x) {sum( (1:n) * x^2)}
enew <- function(lx){
n <- length(lx)
x <- exp(lx)
obj <- log(scale(x)) - sum(log(x))
}
library(optimrx)
n <- 5
mmth<-c("Rvmmin", "Rcgmin")
strt <- (1:n)/(2*n)
lo <- c(rep(-100, (n-1)),strt[n])
up <- c(rep(100, (n-1)),strt[n])
amsk2 <- opm(strt, enll, enll.g, lower=lo, upper=up, method=mmth)
amsk2 <- summary(amsk2, order=value)
print(amsk2)
parm2 <- amsk2[1, 1:n]
parm2 <- parm2/sqrt(scale(parm2))
parm2e<-exp(parm2)
print(parm2e)
cat("enew(parm2)=", enew(parm2),"\n")
print(scale(parm2e))
parm2e
amsk2[1, 1:n]
raw <- amsk2[1, 1:n]
raw <- as.numeric(raw)
raw
# these are log(parameters)
rawp <- exp(raw)
rawp
sqrt(exp(1))
scale <- function(x) {sum( (1:n) * x^2)}
enew <- function(lx){
n <- length(lx)
x <- exp(lx)
sc <- sqrt(scale(x))
#  obj <- - sum(log(x/sc))
obj <- 0.5*n*log(sc)-sum(log(x))
}
library(optimrx)
n <- 5
mmth<-c("Rvmmin", "Rcgmin")
strt <- (1:n)/(2*n)
lo <- c(rep(-100, (n-1)),strt[n])
up <- c(rep(100, (n-1)),strt[n])
amsk2 <- opm(strt, enll, enll.g, lower=lo, upper=up, method=mmth)
amsk2 <- summary(amsk2, order=value)
print(amsk2)
parm2 <- amsk2[1, 1:n]
parm2 <- parm2/sqrt(scale(parm2))
parm2e<-exp(parm2)
print(parm2e)
parm2e<-as.numeric(exp(parm2))
print(parm2e)
cat("enew(parm2)=", enew(parm2),"\n")
rm(list=ls())
scale <- function(x) {sum( (1:n) * x^2)}
enew <- function(lx){
n <- length(lx)
x <- exp(lx)
sc <- sqrt(scale(x))
#  obj <- - sum(log(x/sc))
obj <- 0.5*n*log(sc)-sum(log(x))
}
library(optimrx)
n <- 5
mmth<-c("Rvmmin", "Rcgmin")
strt <- (1:n)/(2*n)
lo <- c(rep(-100, (n-1)),strt[n])
up <- c(rep(100, (n-1)),strt[n])
amsk2 <- opm(strt, enll, enll.g, lower=lo, upper=up, method=mmth)
amsk2 <- summary(amsk2, order=value)
print(amsk2)
parm2 <- amsk2[1, 1:n]
parm2 <- parm2/sqrt(scale(parm2))
parm2e<-as.numeric(exp(parm2))
print(parm2e)
cat("enew(parm2)=", enew(parm2),"\n")
scale <- function(x) {sum( (1:n) * x^2)}
enew <- function(lx){
n <- length(lx)
x <- exp(lx)
sc <- sqrt(scale(x))
#  obj <- - sum(log(x/sc))
obj <- 0.5*n*log(sc)-sum(log(x))
}
library(optimrx)
n <- 5
mmth<-c("Rvmmin", "Rcgmin")
strt <- (1:n)/(2*n)
lo <- c(rep(-100, (n-1)),strt[n])
up <- c(rep(100, (n-1)),strt[n])
amsk2 <- opm(strt, enew, gr="grcentral", lower=lo, upper=up, method=mmth)
amsk2 <- summary(amsk2, order=value)
print(amsk2)
parm2 <- amsk2[1, 1:n]
parm2 <- parm2/sqrt(scale(parm2))
parm2e<-as.numeric(exp(parm2))
print(parm2e)
cat("enew(parm2)=", enew(parm2),"\n")
print(scale(parm2e))
scale <- function(x) {sum( (1:n) * x^2)}
enew <- function(x){
n <- length(x)
##  x <- exp(lx)
sc <- sqrt(scale(x))
#  obj <- - sum(log(x/sc))
obj <- 0.5*n*log(sc)-sum(log(x))
}
library(optimrx)
n <- 5
mmth<-c("Rvmmin", "Rcgmin")
strt <- (1:n)/(2*n)
lo <- c(rep(-100, (n-1)),strt[n])
up <- c(rep(100, (n-1)),strt[n])
amsk2 <- opm(strt, enew, gr="grcentral", lower=lo, upper=up, method=mmth)
amsk2 <- summary(amsk2, order=value)
print(amsk2)
parm2 <- amsk2[1, 1:n]
amsk2 <- opm(strt, enew, gr="grcentral", method=mmth)
scale <- function(x) {sum( (1:n) * x^2)}
enew <- function(x){
n <- length(x)
##  x <- exp(lx)
sc <- sqrt(scale(x))
#  obj <- - sum(log(x/sc))
obj <- n*log(sc)-sum(log(x))
}
library(optimrx)
n <- 5
mmth<-c("Rvmmin", "Rcgmin")
strt <- (1:n)/(2*n)
amsk2 <- opm(strt, enew, gr="grcentral", method=mmth)
amsk2 <- summary(amsk2, order=value)
print(amsk2)
parm2 <- amsk2[1, 1:n]
parm2 <- parm2/sqrt(scale(parm2))
parm2e<-as.numeric(exp(parm2))
print(parm2e)
cat("enew(parm2)=", enew(parm2),"\n")
print(scale(parm2e))
print(parm2)
cat("enew(parm2)=", enew(parm2),"\n")
parm2 <- amsk2[1, 1:n]
print(parm2)
parm2 <- as.numeric(parm2/sqrt(scale(parm2)))
print(parm2)
cat("enew(parm2)=", enew(parm2),"\n")
print(scale(parm2))
library(optimrx)
n <- 5
mmth<-c("Rvmmin", "Rcgmin")
strt <- (1:n)/(2*n)
lo <- c(rep(-100, (n-1)),strt[n])
up <- c(rep(100, (n-1)),strt[n])
amsk2 <- opm(strt, enew, gr="grcentral", lower=lo, upper=up, method=mmth)
amsk2 <- summary(amsk2, order=value)
print(amsk2)
parm2 <- amsk2[1, 1:n]
print(parm2)
parm2 <- as.numeric(parm2/sqrt(scale(parm2)))
print(parm2)
cat("enew(parm2)=", enew(parm2),"\n")
print(scale(parm2))
areg<- opm(strt, enew, gr="grnd", method=mmth)
areg
print(amsk2)
scale <- function(x) {sum( (1:n) * x^2)}
enew <- function(x){
n <- length(x)
##  x <- exp(lx)
sc <- sqrt(scale(x))
obj <- - sum(log(x/sc))
#  obj <- n*log(sc)-sum(log(x))
}
library(optimrx)
n <- 5
mmth<-c("Rvmmin", "Rcgmin")
strt <- (1:n)/(2*n)
lo <- c(rep(-100, (n-1)),strt[n])
up <- c(rep(100, (n-1)),strt[n])
amsk2 <- opm(strt, enew, gr="grcentral", lower=lo, upper=up, method=mmth)
amsk2 <- summary(amsk2, order=value)
print(amsk2)
parm2 <- amsk2[1, 1:n]
print(parm2)
parm2 <- as.numeric(parm2/sqrt(scale(parm2)))
print(parm2)
cat("enew(parm2)=", enew(parm2),"\n")
print(scale(parm2))
areg<- opm(strt, enew, gr="grnd", method=mmth)
areg
pc<- as.numeric(areg[2, 1:5])
pv<- as.numeric(areg[1, 1:5])
pc
pv
scc <- scale(pc)
scc
scale(pc)
pc <- pc/sqrt(pc)
scale(pc)
pc <- pc/sqrt(pc)
pv
scale(pc)
scv <- scale(pv)
scv
pv <- pv/sqrt(pv)
pv
scale(pv)
print(scale(parm2))
library(optimrx)
n <- 5
mmth<-c("Rvmmin", "Rcgmin")
strt <- (1:n)/(2*n)
lo <- c(rep(-100, (n-1)),strt[n])
up <- c(rep(100, (n-1)),strt[n])
amsk2 <- opm(strt, enew, gr="grcentral", lower=lo, upper=up, method=mmth)
amsk2 <- summary(amsk2, order=value)
print(amsk2)
parm2 <- amsk2[1, 1:n]
print(parm2)
parm2 <- as.numeric(parm2/sqrt(scale(parm2)))
print(parm2)
cat("enew(parm2)=", enew(parm2),"\n")
print(scale(parm2))
areg<- opm(strt, enew, gr="grnd", method=mmth)
areg
pc<- as.numeric(areg[2, 1:5])
scale <- function(x) {sum( (1:n) * x^2)}
enew <- function(x){
n <- length(x)
##  x <- exp(lx)
sc <- sqrt(scale(x))
obj <- - sum(log(x/sc))
#  obj <- n*log(sc)-sum(log(x))
}
library(optimrx)
n <- 5
mmth<-c("Rvmmin", "Rcgmin")
strt <- (1:n)/(2*n)
lo <- c(rep(-100, (n-1)),strt[n])
up <- c(rep(100, (n-1)),strt[n])
amsk2 <- opm(strt, enew, gr="grcentral", lower=lo, upper=up, method=mmth)
amsk2 <- summary(amsk2, order=value)
print(amsk2)
parm2 <- amsk2[1, 1:n]
print(parm2)
parm2 <- as.numeric(parm2/sqrt(scale(parm2)))
print(parm2)
cat("enew(parm2)=", enew(parm2),"\n")
print(scale(parm2))
areg<- opm(strt, enew, gr="grnd", method=mmth)
areg
pc<- as.numeric(areg[2, 1:5])
pv<- as.numeric(areg[1, 1:5])
pc
pv
scc <- scale(pc)
scc
pc <- pc/sqrt(pc)
pc
scale(pc)
parm2
parm2/pc
areg<- opm(strt, enew, gr="grnd", method=mmth)
areg
pc<- as.numeric(areg[2, 1:5])
pv<- as.numeric(areg[1, 1:5])
pc
pv
scc <- scale(pc)
scc
pc <- pc/sqrt(scc)
pc
scale(pc)
scv <- scale(pv)
scv
pv <- pv/sqrt(scv)
pv
scale(pv)
?Rvmmin
library(optimrx)
n <- 5
mmth<-c("Rvmmin", "Rcgmin")
mset<-c("Rcgmin", "ucminf", "Nelder-Mead")
strt <- (1:n)/(2*n)
lo <- c(rep(-100, (n-1)),strt[n])
up <- c(rep(100, (n-1)),strt[n])
amsk2 <- opm(strt, enew, gr="grcentral", lower=lo, upper=up, method=mmth)
amsk2 <- summary(amsk2, order=value)
print(amsk2)
parm2 <- amsk2[1, 1:n]
print(parm2)
parm2 <- as.numeric(parm2/sqrt(scale(parm2)))
print(parm2)
cat("enew(parm2)=", enew(parm2),"\n")
print(scale(parm2))
areg<- opm(strt, enew, gr="grnd", method=mset)
areg
for (ii in 1:dim(areg)[1]){
prm <- areg[ii,1:5]
print(prm)
prm<-as.numeric(prm/sqrt(scale(prm)))
cat("scaled parameters:")
print(prm)
cat("new scale=", scale(prm),"\n")
}
source('~/rsvnall/optimizer/sumscale16/geradincode.R')
source('~/rsvnall/optimizer/sumscale16/geradincode.R')
cat("Test geradin\n")
n<-10
AA<-molerbuild(n)
x<-runif(n)
BB=diag(rep(1,n))
cat("xstart:")
print(x)
tg<-system.time(ag<-geradin(x, ax, bx, AA=AA, BB=BB,
control=list(trace=FALSE)))[[3]]
cat("Minimal eigensolution\n")
ag$x<-ag$x/sqrt(as.numeric(crossprod(ag$x))) # rescale
print(ag)
cat("Geradin time=",tg,"\n")
tgn<-system.time(agn<-geradin(x, ax, bx, AA=-AA, BB=BB,
control=list(trace=FALSE)))[[3]]
cat("Maximal eigensolution (negative matrix)\n")
agn$x<-agn$x/sqrt(as.numeric(crossprod(agn$x))) # rescale
print(agn)
esol <- eigen(AA)
esol
cat("Maximal solution - value=",esol$values[1],"\n")
cat("Maximal solution - value=",esol$values[1],"  diff =",esol$values[1]-ag$val,"\n")
ag
agn$RQ
cat("Maximal solution - value=",esol$values[1],"  diff =",esol$values[1]-ag$val,"\n")
str(esol)
cat("max(abs(diff))=", max(abs(esol$vectors[,1]-agn$x))),"\n")
cat("max(abs(diff))=", max(abs(esol$vectors[,1]-agn$x)),"\n")
cat("Minimal solution - value=",esol$values[n],"  diff =",esol$values[n]-ag$RQ,"\n")
print(esol$vectors[,n])
cat("max(abs(diff))=", max(abs(esol$vectors[,n]-ag$x)),"\n")
cat("Test geradin\n")
n<-1000
AA<-molerbuild(n)
x<-runif(n)
BB=diag(rep(1,n))
cat("xstart:")
print(x)
tg<-system.time(ag<-geradin(x, ax, bx, AA=AA, BB=BB,
control=list(trace=FALSE)))[[3]]
tg<-system.time(ag<-geradin(x, ax, bx, AA=AA, BB=BB,
control=list(trace=TRUE)))[[3]]
source('~/rsvnall/optimizer/sumscale16/geradincode.R')
esol$vectors[,n]
agn$x
esol$vectors[,n]
esol$values[n]
ag$RQ
agn
ag
cat("Test geradin\n")
n<-100
AA<-molerbuild(n)
x<-runif(n)
BB=diag(rep(1,n))
cat("xstart:")agn
cat("xstart:")
print(x)
tg<-system.time(ag<-geradin(x, ax, bx, AA=AA, BB=BB,
control=list(trace=TRUE)))[[3]]
cat("Minimal eigensolution\n")
ag$x<-ag$x/sqrt(as.numeric(crossprod(ag$x))) # rescale
print(ag)
cat("Geradin time=",tg,"\n")
tgn<-system.time(agn<-geradin(x, ax, bx, AA=-AA, BB=BB,
control=list(trace=TRUE)))[[3]]
cat("Maximal eigensolution (negative matrix)\n")
agn$x<-agn$x/sqrt(as.numeric(crossprod(agn$x))) # rescale
print(agn)
cat("Geradin time=",tgn,"\n")
esol <- eigen(AA)
cat("Maximal solution - value=",esol$values[1],"  diff =",esol$values[1]+agn$RQ,"\n")
print(esol$vectors[,1])
cat("max(abs(diff))=", max(abs(esol$vectors[,1]-agn$x)),"\n")
cat("Minimal solution - value=",esol$values[n],"  diff =",esol$values[n]-ag$RQ,"\n")
ag
AAorig <- AA
n
II <- diag(diag(n))
II
II <- diag(n)
II
AA <- AAorig-10000*II
tg<-system.time(ag<-geradin(x, ax, bx, AA=AA, BB=BB,
control=list(trace=TRUE)))[[3]]
ag
ag$RQ + 10000
esol$values
AA <- AAorig
tg<-system.time(ag<-geradin(x, ax, bx, AA=AA, BB=BB,
control=list(trace=TRUE)))[[3]]
crossprod(ag$x)
source('~/rsvnall/optimizer/sumscale16/geradincode.R')
n<-100
AA<-molerbuild(n)
x<-runif(n)
BB=diag(rep(1,n))
cat("xstart:")
print(x)
tg<-system.time(ag<-geradin(x, ax, bx, AA=AA, BB=BB,
control=list(trace=TRUE)))[[3]]
cat("Minimal eigensolution\n")
ag$x<-ag$x/sqrt(as.numeric(crossprod(ag$x))) # rescale
print(ag)
cat("Geradin time=",tg,"\n")
cat("Minimal solution - value=",esol$values[n],"  diff =",esol$values[n]-ag$RQ,"\n")
source('~/rsvnall/optimizer/sumscale16/geradincode.R')
n<-100
AA <- frankbuild(n)
x<-runif(n)
AA
BB=diag(rep(1,n))
cat("xstart:")
print(x)
tg<-system.time(ag<-geradin(x, ax, bx, AA=AA, BB=BB,
control=list(trace=TRUE)))[[3]]
cat("Minimal eigensolution\n")
ag$x<-ag$x/sqrt(as.numeric(crossprod(ag$x))) # rescale
print(ag)
cat("Geradin time=",tg,"\n")
tgn<-system.time(agn<-geradin(x, ax, bx, AA=-AA, BB=BB,
control=list(trace=TRUE)))[[3]]
cat("Maximal eigensolution (negative matrix)\n")
n <- 10
ls()
AA <- molerbuild(n)
BB <- frankbuild(n)
x<-rep(1,n)
agn<-geradin(x, ax, bx,AA=-AA, BB=BB, control=list(trace=TRUE))
agn
ag<-geradin(x, ax, bx,AA=AA, BB=BB, control=list(trace=TRUE))
ag
