getpwd()
getwd()
Sweave2knitr("sumscale16.Rnw")
library(knitr)
Sweave2knitr("sumscale16.Rnw")
?Sweave2knitr
# TranQP
Dmat<-diag(c(1,2,3))
Amat<-matrix(c(1, 1, 1), ncol=1)
bvec<-c(1)
meq=1
dvec<-c(0, 0, 0)
ans<-solve.QP(Dmat, dvec, Amat, bvec, meq=0, factorized=FALSE)
library(quadprog)
ans<-solve.QP(Dmat, dvec, Amat, bvec, meq=0, factorized=FALSE)
ans
library(optrimrx)
library(optimrx)
require(optimrx, quietly=TRUE)
pr <- function(y) {
- prod(y)*(1-sum(y))
}
cat("test the simple product for n=5\n")
meth <- c("Nelder-Mead", "BFGS")
n<-5
st<-1:(n-1)/(n*n)
ans<-opm(st, pr, gr="grcentral", control=list(trace=0))
library(optextras)
library(optextras)
ans<-opm(st, pr, gr="grcentral", control=list(trace=0))
pr
st
ls("package:optextras")
ans<-opm(st, pr, control=list(trace=0))
ans
a2 <- optimr(st, pr, gr="grcentral")
a2
a2 <- optimr(st, pr, gr="grcentral", method="BFGS")
install.packages("knitr")
proj2 <- function(theta) {
theta2 <- theta^2
s2 <- theta2 / (1 + theta2)
cumprod(c(1, s2)) * c(1-s2, 1)
}
obj <- function(theta) - sum(log(proj2(theta)))
n <- 5
ans <- spg(seq(n-1), obj)
proj2(ans$par)
@
<<sphere100, echo=TRUE>>=
library(BB)
n<-100
ans100 <- spg(seq(n-1), obj, control=list(trace=FALSE), quiet=TRUE)
proj2( (ans100$par) )
ls()
ans100
ans100vm <- optimr(seq(n-1), obj, gr="grfwd", method="Rvmmin")
library(optimrx)
ans100vm <- optimr(seq(n-1), obj, gr="grfwd", method="Rvmmin")
ans100vm
ans100vm$par
ans100vm <- optimr(seq(n-1), obj, gr="grnd", method="Rvmmin")
ans100vm$par
ans100vm
ans100cg <- optimr(seq(n-1), obj, gr="grnd", method="Rcgmin")
ans100cg
allans<- opm(seq(n-1), obj, gr="grfwd", method="ALL", control=list(dowarn=FALSE))
## summary(allans, order = "list(round(value, 3), fevals)", par.select = FALSE)
summary(allans, order = value, par.select = FALSE)
ans100hn <- optimr(seq(n-1), obj, method="hjn")
ans100hn
ans100hn
proj2 <- function(theta) {
theta2 <- theta^2
s2 <- theta2 / (1 + theta2)
cumprod(c(1, s2)) * c(1-s2, 1)
}
obj <- function(theta) - sum(log(proj2(theta)))
n <- 5
ans <- spg(seq(n-1), obj)
proj2(ans$par)
library(BB)
proj2 <- function(theta) {
theta2 <- theta^2
s2 <- theta2 / (1 + theta2)
cumprod(c(1, s2)) * c(1-s2, 1)
}
obj <- function(theta) - sum(log(proj2(theta)))
n <- 5
ans <- spg(seq(n-1), obj)
proj2(ans$par)
library(BB)
n<-100
ans100 <- spg(seq(n-1), obj, control=list(trace=FALSE), quiet=TRUE)
proj2( (ans100$par) )
library(optimrx)
a100hjn<-optimr(seq(1:(n-1)),obj, method="hjn")
a100hjn$par/sum(a100hjn$par)
a100cg<-optimr(seq(1:(n-1)),obj, gr="grnd" method="Rcgmin")
a100cg<-optimr(seq(1:(n-1)),obj, gr="grnd", method="Rcgmin")
pp <- a100cg$par
pp
pp/sum(pp)
ls()
ps<-ans100$par
sum(ps)
ps
obj(ps)
ps/sum(ps)
proj2(ps)
proj2(pp)
pp<-a100cg$par
proj2(pp)
ls()
obj(pp)
obj(ps)
ans100$value
allans
ph<-a100hjn$par
ph
ph/sum(ph)
obj(ph)
require(optimrx, quietly=TRUE)
pr <- function(y) {
- prod(y)*(1-sum(y))
}
cat("test the simple product for n=5\n")
meth <- c("Nelder-Mead", "BFGS")
n<-5
st<-1:(n-1)/(n*n)
ans<-opm(st, pr, gr="grcentral", control=list(trace=0))
ao<-summary(ans,order=value)
print(ao)
st
stm <- st*(-1^(1:4))
stm
stm <- st*((-1)^(1:4))
stm
ansm<-opm(stm, pr, gr="grcentral", control=list(trace=0))
ansm
require(BB, quietly=TRUE)
ansm<-opm(stm, pr, gr="grcentral", control=list(trace=0))
nllrv <- function(x) {- sum(log(x))}
nllrv.g <- function(x) {- 1/x }
proj <- function(x) {x/sum(x)}
n <- 5
tspg<-system.time(aspg <- spg(par=(1:n)/n^2, fn=nllrv, gr=nllrv.g, project=proj))[[3]]
tspgn<-system.time(aspgn <- spg(par=(1:n)/n^2, fn=nllrv, gr=NULL, project=proj))[[3]]
cat("Times: with gradient =",tspg,"   using numerical approx.=", tspgn,"\n")
aspg
aspgn
aspg
aspgn
proj3 <- function(x) {x/sum(x^2)}
tspgn3<-system.time(aspgn <- spg(par=(1:n)/n^2, fn=nllrv, gr=NULL, project=proj3))[[3]]
tspgn3
aspgn
tspgn3<-system.time(aspgn3 <- spg(par=(1:n)/n^2, fn=nllrv, gr=NULL, project=proj3))[[3]]
aspgn3
spar <- aspgn3$par/sum(aspgn3$par^2)
spar
sum(spar^2)
proj3 <- function(x) {x/sqrt(sum(x^2)}
proj3 <- function(x) {x/sqrt(sum(x^2))}
tspgn3<-system.time(aspgn3 <- spg(par=(1:n)/n^2, fn=nllrv, gr=NULL, project=proj3))[[3]]
aspgn3
upar <- aspgn3$par
upar
spar <- upar/sqrt(sum(upar^2))
spar
sum(spar^2)
cumprod(spar)
prod(spar)
savehistory("161214sumsqscale.txt")
nllrv <- function(x) {- sum(log(x))}
nllrv.g <- function(x) {- 1/x }
proj <- function(x) {x/sum(x)}
nllrv <- function(x) {- sum(log(x))}
nllrv.g <- function(x) {- 1/x }
proj <- function(x) {x/sum(x)}
n <- 5
tspg<-system.time(aspg <- spg(par=(1:n)/n^2, fn=nllrv, gr=nllrv.g, project=proj))[[3]]
tspgn<-system.time(aspgn <- spg(par=(1:n)/n^2, fn=nllrv, gr=NULL, project=proj))[[3]]
cat("Times: with gradient =",tspg,"   using numerical approx.=", tspgn,"\n")
cat("F_optimal: with gradient=",aspg$value,"  num. approx.=",aspgn$value,"\n")
pbest<-rep(1/n, n)
cat("fbest = ",nllrv(pbest),"  when all parameters = ", pbest[1],"\n")
cat("deviations:  with gradient=",max(abs(aspg$par-pbest)),"   num. approx.=",max(abs(aspg$par-pbest)),"\n")
cat("deviations:  with gradient=",max(abs(aspg$par-pbest)),"   num. approx.=",max(abs(aspgn$par-pbest)),"\n")
n<-100
tspgh<-system.time(aspgh <- spg(par=(1:n)/n^2, fn=nllrv, gr=nllrv.g, project=proj))[[3]]
tspgnh<-system.time(aspgnh <- spg(par=(1:n)/n^2, fn=nllrv, gr=NULL, project=proj))[[3]]
cat("Times: with gradient =",tspgh,"   using numerical approx.=", tspgnh,"\n")
cat("F_optimal: with gradient=",aspgh$value,"  num. approx.=",aspgnh$value,"\n")
pbest<-rep(1/n, n)
cat("fbest = ",nllrv(pbest),"  when all parameters = ", pbest[1],"\n")
cat("deviations:  with gradient=",max(abs(aspgh$par-pbest)),"   num. approx.=",max(abs(aspgn$par-pbest)),"\n")
cat("deviations:  with gradient=",max(abs(aspgh$par-pbest)),"   num. approx.=",max(abs(aspgnh$par-pbest)),"\n")
n <- 5
tspg<-system.time(aspg <- spg(par=(1:n)/n^2, fn=nllrv, gr=nllrv.g, project=proj))[[3]]
tspgn<-system.time(aspgn <- spg(par=(1:n)/n^2, fn=nllrv, gr=NULL, project=proj))[[3]]
cat("Times: with gradient =",tspg,"   using numerical approx.=", tspgn,"\n")
cat("F_optimal: with gradient=",aspg$value,"  num. approx.=",aspgn$value,"\n")
pbest<-rep(1/n, n)
cat("fbest = ",nllrv(pbest),"  when all parameters = ", pbest[1],"\n")
cat("deviations:  with gradient=",max(abs(aspg$par-pbest)),"   num. approx.=",max(abs(aspgn$par-pbest)),"\n")
n<-100
tspgh<-system.time(aspgh <- spg(par=(1:n)/n^2, fn=nllrv, gr=nllrv.g, project=proj))[[3]]
tspgnh<-system.time(aspgnh <- spg(par=(1:n)/n^2, fn=nllrv, gr=NULL, project=proj))[[3]]
cat("Times: with gradient =",tspgh,"   using numerical approx.=", tspgnh,"\n")
cat("F_optimal: with gradient=",aspgh$value,"  num. approx.=",aspgnh$value,"\n")
pbesth<-rep(1/n, n)
cat("fbest = ",nllrv(pbesth),"  when all parameters = ", pbesth[1],"\n")
cat("deviations:  with gradient=",max(abs(aspgh$par-pbesth)),"   num. approx.=",max(abs(aspgnh$par-pbesth)),"\n")
n<-1000
tspgt<-system.time(aspgt <- spg(par=(1:n)/n^2, fn=nllrv, gr=nllrv.g, project=proj))[[3]]
tspgnt<-system.time(aspgnt <- spg(par=(1:n)/n^2, fn=nllrv, gr=NULL, project=proj))[[3]]
cat("Times: with gradient =",tspgt,"   using numerical approx.=", tspgnt,"\n")
cat("F_optimal: with gradient=",aspgt$value,"  num. approx.=",aspgnt$value,"\n")
pbestt<-rep(1/n, n)
cat("fbest = ",nllrv(pbestt),"  when all parameters = ", pbestt[1],"\n")
ls()
n
stt <- (1:n)/n^2
stt
ls()
nllrv(stt)
nllrv.g(stt)
tspgt<-system.time(aspgt <- spg(par=(1:n)/n^2, fn=nllrv, gr=nllrv.g, project=proj))[[3]]
warning()
warnings()
tspgt<-system.time(aspgt <- spg(par=(1:n)/n^2, fn=nllrv, gr=nllrv.g, project=proj))[[3]]
warnings()
n <- 5
s5 <- (1:5)/25
all5 <- opm(s5, nllrv, gr="grfwd", method="ALL")
all5
all5 <- opm(s5, nllrv, gr="grfwd", method="ALL")
all5 <- opm(s5, nllrv, gr="grfwd", method="ALL", control=list(trace=1))
mlist
mlist<-c("nlm", "Rvmmin". "Rcgmin", "nmkb")
mlist<- c("nlm", "Rvmmin". "Rcgmin", "nmkb")
mlist<- c("nlm", "Rvmmin", "Rcgmin", "nmkb")
all5 <- opm(s5, nllrv, gr="grfwd", method=mlist, control=list(trace=1))
all5
summary(all5, order=value)
snllrv <- function(x) {- sum(log(x/sum(x)))}
all5 <- opm(s5, snllrv, gr="grfwd", method=mlist, control=list(trace=1))
all5
all5 <- opm(s5, snllrv, gr="grnd", method=mlist, control=list(trace=1))
all5
all5 <- opm(s5, snllrv, method=mlist, control=list(trace=1))
all5
all5 <- opm(s5, snllrv, gr="grcentral", method="ALL", control=list(trace=1))
all5
n<-100
s100 <- (1:100)/1e4
allh <- opm(s100, snllrv, gr="grcentral", method="ALL", control=list(trace=1))
summary(allh, order=value)
summary(allh, order=value, par.select=1:3)
ls()
stt
cgt <- optimr(stt, snllrv, gr="grnd", method="Rcgmin")
cgt <- optimr(stt, snllrv, gr="grcentral", method="Rcgmin")
summary(cgt)
cgt
cgt <- optimr(stt, snllrv, gr="grback", method="Rcgmin")
warnings()
summary(allh, order=value)
summary(allh, order=value, par.select=1:3)
spgh<-optimr(sth, snllrv, method="spg")
ls()
st
stm
stt
sth <- (1:100)/1e4
spgh<-optimr(sth, snllrv, method="spg")
spgh
snllrv(sth)
savehistory("161214snllrv.txt")
require(optimrx, quietly=TRUE) # just to be sure
st<-1:5/10 # 5 parameters, crude scaling to start
a5x<-opm(st, enll, enll.g, method="ALL", control=list(trace=0))
a5xbyvalue<-summary(a5x, order=value, par.select=1:2)
st<-1:5/10 # 5 parameters, crude scaling to start
a5x<-opm(st, enll, enll.g, method="ALL", control=list(trace=0))
a5x<-opm(st, enll, enll.g, method="ALL", control=list(trace=0))
enll <- function(lx) {
x<-exp(lx)
fval<-  - sum( log( x/sum(x) ) )
}
enll.g <- function(lx){
x<-exp(lx)
g<-length(x)/sum(x) - 1/x
gval<-g*exp(lx)
}
st<-1:5/10 # 5 parameters, crude scaling to start
a5x<-opm(st, enll, enll.g, method="ALL", control=list(trace=0))
a5xbyvalue<-summary(a5x, order=value, par.select=1:2)
xnor<-a5xbyvalue[1, 1:5] # get the 5 parameters of "best" solution
print(a5xbyvalue)
ftest <- sum(crossprod(x-(1:n)))
ftest <- function(x) {sum(crossprod(x-(1:n)))}
test <- ucminf(1:10, ftest)
require(ucminf)
test <- ucminf(1:10, ftest)
rm(list=ls())
sq<-function(x){
nn<-length(x)
yy<-1:nn
f<-sum((yy-x)^2)
cat("Fv=",f," at ")
print(x)
f
}
sq.g <- function(x){
nn<-length(x)
yy<-1:nn
gg<- 2*(x - yy)
}
require(Rvmmin)
require(numDeriv)
x<-rep(pi,3)
fv0<-sq(x)
ga<-sq.g(x)
print(ga)
gn<-grad(sq,x)
print(gn)
cat("Show trajectory differences BFGS and Rvmmin\n")
opt1<-optim(x, sq, sq.g, control=list(trace=4), method="BFGS")
opt1r<-Rvmmin(x, sq, sq.g, control=list(trace=1))
require("minqa")
cat("Show minqa results\n")
strt<-rep(pi,5)
print(sq(strt))
abob<-bobyqa(strt, sq, lower=rep(-10,5), upper=rep(10,5), control=list(iprint=3))
print(abob)
print(str(abob))
require(ucminf)
au <- ucminf(strt, sq, sq.g, control=list(trace=1))
remove.packages("ucminf")
install.packages("ucminf")
install.packages("ucminf")
source('/media/john/J6R/mainset/jn/R-optimtest/testfnsR/simple/sq.R')
require(ucminf)
au <- ucminf(strt, sq, sq.g, control=list(trace=1))
require(optimrx, quietly=TRUE) # just to be sure
st<-1:5/10 # 5 parameters, crude scaling to start
a5x<-opm(st, enll, enll.g, method="ALL", control=list(trace=0))
a5xbyvalue<-summary(a5x, order=value, par.select=1:2)
print(a5xbyvalue)
xnor<-a5xbyvalue[1, 1:5] # get the 5 parameters of "best" solution
xnor<-xnor/sum(xnor)
cat("normalized parameters:")
print(xnor)
enll <- function(lx) {
x<-exp(lx)
fval<-  - sum( log( x/sum(x) ) )
}
enll.g <- function(lx){
x<-exp(lx)
g<-length(x)/sum(x) - 1/x
gval<-g*exp(lx)
}
require(optimrx, quietly=TRUE) # just to be sure
st<-1:5/10 # 5 parameters, crude scaling to start
a5x<-opm(st, enll, enll.g, method="ALL", control=list(trace=0))
a5xbyvalue<-summary(a5x, order=value, par.select=1:2)
print(a5xbyvalue)
xnor<-a5xbyvalue[1, 1:5] # get the 5 parameters of "best" solution
xnor<-xnor/sum(xnor)
cat("normalized parameters:")
print(xnor)
ls()
a5x
str(a5x)
a4x$par
a5x$par
a5x[,1:5]
dim(a5x)
for (ir in 1:18){}
for (ir in 1:18){
vec <- a5x[ir, 1:5]
vec <- vec/sum(vec)
a5x[ir,1:5] <- vec
}
a5x
savehistory(161214rescale.txt)
savehistory(161214rescale.txt"")
savehistory("161214rescale.txt"")
)
savehistory("161214rescale.txt")
