## @knitr ##YourProblem.prb
# This is file ##YourProblem.prb
probname <- "##YourProblem"
probdesc <- "Put your description in double quotes.
"

#- Note: environment / list "counters" must already exist

if (exists("pe")) { 
      rm("pe")  
  }

pe <- new.env()
pe$kf <- 0
pe$kg <- 0
pe$kjac <- 0
pe$kres <- 0

#- nls format expression
##YourProblem.formula <- ( y ~ b1*x**b2 )

#- setup

library("NISTnls", character.only=TRUE)
mypdata <- eval(parse(text=data("YourProblem")))


## 171004 Combine data and start into setup. 
# ##YourProblem.setup<-function() {
y <- c( 2.138, 3.421, 3.597, 4.340, 4.882, 5.660) # example only
x <- c( 1.309, 1.471, 1.490, 1.565, 1.611, 1.680)
##YourProblem.df <- data.frame(x,y)
rm(x)
rm(y)

##YourProblem.start <- function(indx) {
#- Problem types will be determined from available functions / formulas
#- ?? We could have problems with quotation marks WITHIN the code.
#- lower = NA # if bounds are present, then we use bounded methods
#- upper = NA # 

#- function
##YourProblem.f <- function(x) { # ?? should remove -- this is a sumsquares problem

#- gradient
##YourProblem.g<-function(x) {
#-   stop('not defined')

#- hessian
##YourProblem.h <- function(x) {


#- residual
##YourProblem.res <- function(b) {

#- Jacobian
##YourProblem.jac <- function(b) {

#- nleq -- ?? section if appropriate


#- test
## put example calls of the function, possibly including calls to 
# optimizations and nonlinear least squares etc.


#- End YourProblem.prb
