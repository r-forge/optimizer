xnor<-a5xbyvalue[1, 1:5] # get the 5 parameters of "best" solution
xnor<-xnor/sum(xnor)
cat("normalized parameters:")
print(xnor)
ls()
a5x
str(a5x)
a4x$par
a5x$par
a5x[,1:5]
dim(a5x)
for (ir in 1:18){}
for (ir in 1:18){
vec <- a5x[ir, 1:5]
vec <- vec/sum(vec)
a5x[ir,1:5] <- vec
}
a5x
savehistory(161214rescale.txt)
savehistory(161214rescale.txt"")
savehistory("161214rescale.txt"")
)
savehistory("161214rescale.txt")
nll <- function(y) { # large result if near zero arguments to log()
if ((any(y <= 10*.Machine$double.xmin)) || (sum(y)>1-.Machine$double.eps))
.Machine$double.xmax
else   - sum(log(y)) - log(1-sum(y))
}
nll.g <- function(y) { - 1/y + 1/(1-sum(y))} # so far not safeguarded
require(optimrx, quietly=TRUE)
n<-5
lo <- c(rep(-100, (n-1)),1))
lo <- c(rep(-100, (n-1)),1)
up <- c(rep(100, (n-1)),1)
mmth <- c("Rvmmin", "Rcgmin")
strt <- (1:n)/n^2
amsk1 <- opm(strt, enll, enll.g, lower=lo, upper=up, method=mmth)
print(amsk1)
mmth <- c("Rvmmin", "Rcgmin")
strt <- (1:n)/n^2
lo <- c(rep(-100, (n-1)),strt[n])
up <- c(rep(100, (n-1)),strt[n])
lo
up
amsk1 <- opm(strt, enll, enll.g, lower=lo, upper=up, method=mmth)
print(amsk1)
amsk1 <- summary(amsk1, order=value)
parmsk <- amsk1[1, 1:n]
parmsk <- parmsk/sum(parmsk)
print(parmsk)
n<-100
lo <- c(rep(-100, (n-1)),strt[n])
up
strt <- (1:n)/n^2
lo <- c(rep(-100, (n-1)),strt[n])
up <- c(rep(100, (n-1)),strt[n])
lo
up
amsk1 <- opm(strt, enll, enll.g, lower=lo, upper=up, method=mmth)
print(parmsk)
print(amsk1)
amsk1 <- summary(amsk1, order=value)
amsk1
strt
strt <- (1:n)/n
strt
lo <- c(rep(-100, (n-1)),strt[n])
up <- c(rep(100, (n-1)),strt[n])
amsk1 <- opm(strt, enll, enll.g, lower=lo, upper=up, method=mmth)
amsk1
cat("try loading optimrx\n")
require(optimrx, quietly=TRUE)
pr <- function(y) {
- prod(y)*(1-sum(y))
}
cat("test the simple product for n=5\n")
meth <- c("Nelder-Mead", "BFGS")
n<-5
m<-n-1
st<-1:m/(m*m)
ans<-opm(st, pr, gr="grcentral", control=list(trace=0))
ao<-summary(ans,order=value)
print(ao)
par <- ao[1,1:m]
par <- c(par, 1-sum(par))
par <- par/sum(par)
par
par <- ao[1,1:m]
par
str(par)
par <- as.vector(ao[1,1:m])
par
str(par)
par <- as.double(ao[1,1:m])
par
par <- as.double(ao[1,1:m])
par <- c(par, 1-sum(par))
par <- par/sum(par)
cat("Best parameters:")
print(par)
stm <- st*((-1)^(1:4))
print(stm)
ansm<-opm(stm, pr, gr="grcentral", control=list(trace=0))
aom <- summary(ansm, order=value)
print(aom)
nll <- function(y) { # large result if near zero arguments to log()
if ((any(y <= 10*.Machine$double.xmin)) || (sum(y)>1-.Machine$double.eps))
.Machine$double.xmax
else   - sum(log(y)) - log(1-sum(y))
}
nll.g <- function(y) { - 1/y + 1/(1-sum(y))} # so far not safeguarded
mset<-c("L-BFGS-B", "spg", "nlm", "nlminb", "Rvmmin", "Rcgmin")
a5<-opm(2:n/n^2, nll, gr="grfwd", method=mset, control=list(dowarn=FALSE))
a5g<-opm(2:n/n^2, nll, nll.g, method=mset, control=list(dowarn=FALSE))
a5gb<-opm(2:n/n^2, nll, nll.g, lower=0, upper=1, method=mset, control=list(dowarn=FALSE))
summary(a5,order=value)
summary(a5g,order=value)
summary(a5gb,order=value)
require(BB, quietly=TRUE)
nllrv <- function(x) {- sum(log(x))}
nllrv.g <- function(x) {- 1/x }
proj <- function(x) {x/sum(x)}
n <- 5
tspg<-system.time(aspg <- spg(par=(2:n)/n^2, fn=nllrv, gr=nllrv.g, project=proj))[[3]]
tspgn<-system.time(aspgn <- spg(par=(2:n)/n^2, fn=nllrv, gr=NULL, project=proj))[[3]]
cat("Times: with gradient =",tspg,"   using numerical approx.=", tspgn,"\n")
cat("F_optimal: with gradient=",aspg$value,"  num. approx.=",aspgn$value,"\n")
pbest<-rep(1/n, n)
cat("fbest = ",nllrv(pbest[2:n]),"  when all parameters = ", pbest[1],"\n")
cat("deviations:  with gradient=",max(abs(aspg$par-pbest)),"   num. approx.=",max(abs(aspgn$par-pbest)),"\n")
pbest<-rep(1/n, n-1)
cat("fbest = ",nllrv(pbest),"  when all parameters = ", pbest[1],"\n")
pbest
pbest<-rep(1/n, n)
cat("fbest = ",nllrv(pbest[2:n]),"  when all parameters = ", pbest[1],"\n")
aspg
aspg$par
tspg<-system.time(aspg <- spg(par=(1:n)/n^2, fn=nllrv, gr=nllrv.g, project=proj))[[3]]
tspgn<-system.time(aspgn <- spg(par=(1:n)/n^2, fn=nllrv, gr=NULL, project=proj))[[3]]
cat("Times: with gradient =",tspg,"   using numerical approx.=", tspgn,"\n")
cat("F_optimal: with gradient=",aspg$value,"  num. approx.=",aspgn$value,"\n")
pbest<-rep(1/n, n)
cat("fbest = ",nllrv(pbest[2:n]),"  when all parameters = ", pbest[1],"\n")
cat("deviations:  with gradient=",max(abs(aspg$par-pbest)),"   num. approx.=",max(abs(aspgn$par-pbest)),"\n")
aspg$par
cat("fbest = ",nllrv(pbest),"  when all parameters = ", pbest[1],"\n")
n<-100
tspgh<-system.time(aspgh <- spg(par=(1:n)/n^2, fn=nllrv, gr=nllrv.g, project=proj))[[3]]
tspgnh<-system.time(aspgnh <- spg(par=(1:n)/n^2, fn=nllrv, gr=NULL, project=proj))[[3]]
cat("Times: with gradient =",tspgh,"   using numerical approx.=", tspgnh,"\n")
cat("F_optimal: with gradient=",aspgh$value,"  num. approx.=",aspgnh$value,"\n")
pbesth<-rep(1/n, n)
cat("fbest = ",nllrv(pbesth),"  when all parameters = ", pbesth[1],"\n")
cat("deviations:  with gradient=",max(abs(aspgh$par-pbesth)),"   num. approx.=",max(abs(aspgnh$par-pbesth)),"\n")
enll <- function(lx) {
x<-exp(lx)
fval<-  - sum( log( x/sum(x) ) )
}
enll.g <- function(lx){
x<-exp(lx)
g<-length(x)/sum(x) - 1/x
gval<-g*exp(lx)
}
require(optimrx, quietly=TRUE) # just to be sure
st<-1:5/10 # 5 parameters, crude scaling to start
st<-log(st)
n <- 5
mset<-c("L-BFGS-B", "spg", "nlm", "nlminb", "Rvmmin", "Rcgmin")
a5x<-opm(st, enll, enll.g, method=mset, control=list(trace=0))
a5xbyvalue<-summary(a5x, order=value)
print(a5xbyvalue)[(n+1):(n+7)]
xnor<-exp(a5xbyvalue[1, 1:5]) # get the 5 parameters of "best" solution, exponentiate
xnor<-xnor/sum(xnor)
cat("best normalized parameters:")
print(xnor)
require(Rcgmin, quietly=TRUE)
st<-1:100/1e3 # large
stenll<-enll(st)
cat("Initial function value =",stenll,"\n")
tym<-system.time(acgbig<-Rcgmin(st, enll, enll.g, control=list(trace=0, tol=1e-32)))[[3]]
cat("Time = ",tym,"  fval=",acgbig$value,"\n")
st<-1:100/1e3 # large
stenll<-enll(st)
tym<-system.time(acgbig<-optimr(st, enll, enll.g, method="Rcgmin" control=list(trace=0, tol=1e-32)))[[3]]
tym<-system.time(acgbig<-optimr(st, enll, enll.g, method="Rcgmin", control=list(trace=0, tol=1e-32)))[[3]]
cat("Time = ",tym,"  fval=",acgbig$value,"\n")
xnor<-acgbig$par
xnor<-exp(xnor)/sum(exp(xnor)) # back transform
cat("Average parameter is ", mean(xnor)," with max deviation", max(abs(xnor-mean(xnor))),"\n")
proj2 <- function(theta) {
theta2 <- theta^2
s2 <- theta2 / (1 + theta2)
cumprod(c(1, s2)) * c(1-s2, 1)
}
obj <- function(theta) - sum(log(proj2(theta)))
n <- 5
ans <- spg(seq(n-1), obj)
proj2(ans$par)
seq(n-1)
seq(n)
proj2(1)
proj2(1:4)
sum(proj2(1:4))
?cumprod
xx <- 1:4
cumprod(xx)
cumprod(xx*(25-xx))
25-xx
sxx<-sin(xx)^2
sxx
cxx<-cos(xx)^2
sxx+cxx
proj <- function(theta) {
s2 <- sin(theta)^2
cumprod(c(1, s2)) * c(1-s2, 1)
}
proj(xx)
sum(proj(xx))
proj2
proj(xx)
proj2(xx)
sum(proj2(xx))
sum(proj(xx))
cumsum(proj(xx))
cumsum(proj2(xx))
xx<-1:2
s2<-sin(xx)^2
s2
c1<-c(1,s2)
c1
c2<-c(1-s2, 1)
c2
cc <- c1*c2
cc
ccc<-cumprod(cc)
ccc
sum(ccc)
rm(ccc)
rm(cc)
c1
c2
cc1<-cumprod(c1)
cc1
c2
ccc<-cc1*c2
sum(ccc)
proj
xx<-2
s2<-sin(xx)^2
c1<-c(1,s2)
c1
s2
cc1<-cumprod(c1)
cc1
c2<-c(1-s2,1)
c2
proj
n<-5
mmth <- c("Rvmmin", "Rcgmin")
strt <- (1:n)/n
lo <- c(rep(-100, (n-1)),strt[n])
up <- c(rep(100, (n-1)),strt[n])
amsk1 <- opm(strt, enll, enll.g, lower=lo, upper=up, method=mmth)
print(amsk1)
amsk1 <- summary(amsk1, order=value)
parmsk <- amsk1[1, 1:n]
parmsk <- parmsk/sum(parmsk)
print(parmsk)
n<-100
mmth <- c("Rvmmin", "Rcgmin")
strt <- (1:n)/n
lo <- c(rep(-100, (n-1)),strt[n])
up <- c(rep(100, (n-1)),strt[n])
amsk1 <- opm(strt, enll, enll.g, lower=lo, upper=up, method=mmth)
print(amsk1)
amsk1 <- summary(amsk1, order=value)
parmsk <- amsk1[1, 1:n]
parmsk <- parmsk/sum(parmsk)
print(parmsk)
library(nleqslv)
install.packages("nleqslv")
library(nleqslv)
?nleqslv
x<-1:5
ls()
tn <- nleqslv(x, nll.g)
tn
ls
ls()
tn$x
parn <- tn$x/sum(tn$x)
parn
te <- nleqslv(x, enll.g)
te
te$x
xh<-1:100
teh <- nleqslv(xh, enll.g)
teh
teh$x
library(nleqslv)
x<-1:5
tn <- nleqslv(x, nll.g)
tn
parn <- tn$x/sum(tn$x)
nll.g <- function(y) { - 1/y + 1/(1-sum(y))} # so far not safeguarded
enll.g <- function(lx){
x<-exp(lx)
g<-length(x)/sum(x) - 1/x
gval<-g*exp(lx)
}
x<-1:5
tn <- nleqslv(x, nll.g)
tn
parn <- tn$x/sum(tn$x)
cat("rescaled parameters")
print(parn)
te <- nleqslv(x, enll.g)
te
pare <- te$x/sum(te$x)
cat("rescaled parameters")
print(pare)
xh<-1:100
teh <- nleqslv(xh, enll.g)
teh
parh <- teh$x/sum(teh$x)
cat("rescaled parameters (first 5)")
print(parh[1:5])
nlfb(xh, resfn=enll.g, trace=1)
library(nlsr)
nlfb(xh, resfn=enll.g, trace=1)
nh<-nlfb(xh, resfn=enll.g, trace=1)
coef(nh)
ne<-nlfb(x, ennl.g, trace=1)
ne<-nlfb(x, enll.g, trace=1)
coef(ne)
ne<-nlfb(x, enll.g, lower=lo, upper=up, trace=1)
lo <- c(rep(-100, (n-1)),strt[n])
up <- c(rep(100, (n-1)),strt[n])
n<-5
mmth <- c("Rvmmin", "Rcgmin")
strt <- (1:n)/n
lo <- c(rep(-100, (n-1)),strt[n])
up <- c(rep(100, (n-1)),strt[n])
ne<-nlfb(strt, enll.g, lower=lo, upper=up, trace=1)
coef(ne)
ne<-nlfb(strt, enll.g, trace=1)
coef(ne)
pare2 <- coef(ne)(sum(coef(ne)))
pare2 <- coef(ne)(sum(coef(ne)))
rawe <- coef(ne)
rawe
pare2 <- rawe/sum(rawe)
pare2
nh<-nlfb(xh, enll.g, trace=1)
rawh <- coef(nh)
rawh
parh2 <- rawh/sum(rawh)
parh2
nh<-nlfb(xh, enll.g)
rawh <- coef(nh)
rawh
parh2 <- rawh/sum(rawh)
parh2
?sd
te <- nleqslv(x, enll.g)
pare <- te$x/sum(te$x)
cat("nleqslv: rescaled parameter mean=", mean(pare)," with SD=",sd(pare),"\n")
ne<-nlfb(strt, enll.g, trace=1)
rawe <- coef(ne)
pare2 <- rawe/sum(rawe)
cat("nlsr: rescaled parameter mean=", mean(pare2)," with SD=",sd(pare2),"\n")
cat("\nNow 100 parameters\n")
xh<-1:100
teh <- nleqslv(xh, enll.g)
teh
parh <- teh$x/sum(teh$x)
cat("nlsr: rescaled parameter mean=", mean(parh)," with SD=",sd(parh),"\n")
nh<-nlfb(xh, enll.g)
rawh <- coef(nh)
rawh
parh2 <- rawh/sum(rawh)
parh2
cat("\nNow 100 parameters\n")
xh<-1:100
teh <- nleqslv(xh, enll.g)
teh
parh <- teh$x/sum(teh$x)
parh <- teh$x/sum(teh$x)
cat("nleqslv: rescaled parameter mean=", mean(parh)," with SD=",sd(parh),"\n")
nh<-nlfb(xh, enll.g)
rawh <- coef(nh)
rawh
parh2 <- rawh/sum(rawh)
cat("nleqslv: rescaled parameter mean=", mean(parh2)," with SD=",sd(parh2),"\n")
library(nleqslv)
library(nlsr)
cat("Problem of order 5 using nll.g\n")
x<-1:5
tn <- nleqslv(x, nll.g)
tn
parn <- tn$x/sum(tn$x)
cat("nleqslv: rescaled parameter mean=", mean(parn)," with SD=",sd(parn),"\n")
cat("Problem of order 5 using enll.g\n")
te <- nleqslv(x, enll.g)
cat("Problem of order 5 using nll.g\n")
x<-1:5
tn <- nleqslv(x, nll.g)
parn <- tn$x/sum(tn$x)
cat("nleqslv: rescaled parameter mean=", mean(parn)," with SD=",sd(parn),"\n")
cat("Problem of order 5 using enll.g\n")
te <- nleqslv(x, enll.g)
pare <- te$x/sum(te$x)
cat("nleqslv: rescaled parameter mean=", mean(pare)," with SD=",sd(pare),"\n")
ne<-nlfb(strt, enll.g, trace=1)
rawe <- coef(ne)
pare2 <- rawe/sum(rawe)
cat("nlsr: rescaled parameter mean=", mean(pare2)," with SD=",sd(pare2),"\n")
cat("\nNow 100 parameters using enll.g\n")
xh<-1:100
teh <- nleqslv(xh, enll.g)
parh <- teh$x/sum(teh$x)
cat("nleqslv: rescaled parameter mean=", mean(parh)," with SD=",sd(parh),"\n")
nh<-nlfb(xh, enll.g)
rawh <- coef(nh)
parh2 <- rawh/sum(rawh)
cat("nleqslv: rescaled parameter mean=", mean(parh2)," with SD=",sd(parh2),"\n")
nh<-nlfb(xh, enll.g, trace=FALSE)
nh<-nlfb(xh, enll.g, trace=0)
library(nlmrt)
cat("Problem of order 5 using nll.g\n")
x<-1:5
tn <- nleqslv(x, nll.g)
parn <- tn$x/sum(tn$x)
cat("nleqslv: rescaled parameter mean=", mean(parn)," with SD=",sd(parn),"\n")
cat("Problem of order 5 using enll.g\n")
te <- nleqslv(x, enll.g)
pare <- te$x/sum(te$x)
cat("nleqslv: rescaled parameter mean=", mean(pare)," with SD=",sd(pare),"\n")
ne<-nlfb(strt, enll.g, trace=1)
ne<-nlfb(strt, enll.g, trace=0)
rawe <- coef(ne)
pare2 <- rawe/sum(rawe)
cat("nlsr: rescaled parameter mean=", mean(pare2)," with SD=",sd(pare2),"\n")
cat("\nNow 100 parameters using enll.g\n")
xh<-1:100
teh <- nleqslv(xh, enll.g)
parh <- teh$x/sum(teh$x)
cat("nleqslv: rescaled parameter mean=", mean(parh)," with SD=",sd(parh),"\n")
nh<-nlfb(xh, enll.g, trace=0)
rawh <- coef(nh)
parh2 <- rawh/sum(rawh)
cat("nleqslv: rescaled parameter mean=", mean(parh2)," with SD=",sd(parh2),"\n")
n<-5
sd()
n<-5
enew <- function(lx){
n <- length(lx)
x <- exp(lx)
scale <- sum( (1:n) * x^2)
obj <- log(scale) - sum(log(x))
}
strt <- (1:n)/(2*n)
lo <- c(rep(-100, (n-1)),strt[n])
up <- c(rep(100, (n-1)),strt[n])
n
lo
up
amsk2 <- opm(strt, enll, enll.g, lower=lo, upper=up, method=mmth)
libary(optimrx)
strt <- (1:n)/(2*n)
lo <- c(rep(-100, (n-1)),strt[n])
up <- c(rep(100, (n-1)),strt[n])
amsk2 <- opm(strt, enll, enll.g, lower=lo, upper=up, method=mmth)
libary(optimrx)
library(optimrx)
strt <- (1:n)/(2*n)
lo <- c(rep(-100, (n-1)),strt[n])
up <- c(rep(100, (n-1)),strt[n])
amsk2 <- opm(strt, enll, enll.g, lower=lo, upper=up, method=mmth)
amsk2 <- summary(amsk2, order=value)
print(amsk2)
parm2 <- amsk2[1, 1:n]
parm2
parm2 <- parm2/sqrt(scale(parm2))
print(parm2)
parm2
parm2 <- amsk2[1, 1:n]
parm2
scale(parm2)
parm2 <- amsk2[1, 1:n]
xx <- parm2
xx
xy <- (1:n)*xx^2
xy
names(xy)<-NULL
xy
sum(xy)
sqrt(sum(xy))
scale(xx)
xx <- c(1,2)
scale <- 1 + 2*4
scale
obj <- 2
xy <- xx/sqrt(9)
xy
prod(xy)
sum(log(xy))
sum(log(xx))
-sum(log(xx))+log(3)
-sum(log(xx))+log(9)
xy <- xx/sqrt(9)
sum(log(xx))
