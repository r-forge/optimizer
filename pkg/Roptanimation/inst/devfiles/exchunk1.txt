



pf <- 10 # penalty factor
cat("initial penalized objective: ", polyobj(myhex$par0, pf),"\n")

start<-myhex$par0
# This fails -- angles get too big and it gets area wrong
# by wrapping around
# sol <- optim(start, polyobj, control=list(trace=1))
library(minqa)
ub <- c(rep(1,(nv-1)), rep(0.75*pi, (nv-2))) # approx for angles
lb <- c(rep(0, (2*nv-3)))
sol <- bobyqa(start, polyobj, lower=lb, upper=ub, control=list(iprint=3), penfactor=10)
xx<-sol$par

solXY <- polypar2XY(nv, xx)
points(solXY$x, solXY$y, col='red', type='l')

library(Rvmmin)
solvm<-Rvmmin(start, polyobj, lower=lb, upper=ub, control=list(trace=1), penfactor=10)
xvm <- solvm$par
areavm <- polyarea(nv, xvm)
areabob <- polyarea(nv, xx)
solvmXY <- polypar2XY(nv, xvm)
points(solvmXY$x, solvmXY$y, col='green', type='l')
newstart <- xvm
pf <- 0.1
solvm<-Rvmmin(start, polyobj, lower=lb, upper=ub, control=list(trace=1), penfactor=pf)
solvmXY <- polypar2XY(nv, solvm$par)
points(solvmXY$x, solvmXY$y, col='blue', type='l')
