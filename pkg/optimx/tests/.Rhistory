# My own Rvmmin and Rcgmin handle 1D
ansone2<-opm(x0, f1, g1, method = c("Rvmmin", "Rcgmin"), control=list(trace=0))
ansone2.sum<-summary(ansone, order=value)
ansone2.sum<-summary(ansone2, order=value)
print(ansone2.sum)
# maxfn.R
##  author: John C. Nash
rm(list=ls())
require(optimx)
sessionInfo()
maxfn<-function(x) {
n<-length(x)
ss<-seq(1,n)
f<-10-(crossprod(x-ss))^2
f<-as.numeric(f)
return(f)
}
negmaxfn<-function(x) {
f<-(-1)*maxfn(x)
return(f)
}
cat("test that maximize=TRUE works correctly\n")
n<-6
xx<-rep(1,n)
ansmax<-optimr(xx,maxfn, gr="grfwd", method="Rvmmin", control=list(maximize=TRUE,trace=0))
print(ansmax)
ansnegmax<-optimr(xx,negmaxfn, gr="grfwd",  method="Rvmmin", control=list(trace=0))
print(ansnegmax)
ansmax<-optimr(xx,maxfn, gr="grfwd", method="Nelder-Mead", control=list(maximize=TRUE,trace=0))
print(ansmax)
ansmaxn<-optimr(xx,negmaxfn, gr="grfwd", method="Nelder-Mead", control=list(maximize=TRUE,trace=0))
print(ansmax)
ansmaxn<-optimr(xx,negmaxfn, gr="grfwd", method="Nelder-Mead", control=list(maximize=TRUE,trace=0))
print(ansmaxn)
ansmaxn<-optimr(xx,negmaxfn, gr="grfwd", method="Nelder-Mead", control=list(maximize=TRUE,trace=2))
ansmax<-optimr(xx,maxfn, gr="grfwd", method="Nelder-Mead", control=list(maximize=TRUE,trace=2))
ansmax<-optimr(xx,maxfn, gr="grfwd", method="Nelder-Mead", control=list(maximize=TRUE,trace=2, maxit=200))
fnscale <- -1
pscale <- 1
eefn <- function(spar, ...) {
# rely on pscale being defined in this enclosing environment
par <- spar*pscale
val <- maxfn(par, ...) * fnscale
}
ansmax<-optimr(xx, eefn, gr="grfwd", method="Rvmmin", control=list(trace=2))
print(ansmax)
amaxkkt <- kktchk(ansmax$par, maxfn, gr="grfwd", hess=NULL,  maximize=TRUE, control=list(trace=0))
amaxee <- kktchk(ansmax$par, maxfn, gr="grfwd", hess=NULL,  maximize=TRUE, control=list(trace=0))
print(amaxee)
eefn <- function(spar, ...) {
# rely on pscale being defined in this enclosing environment
par <- spar*pscale
val <- maxfn(par, ...) * fnscale
}
amaxee <- kktchk(ansmax$par, maxfn, gr="grfwd", hess=NULL,  maximize=TRUE, control=list(trace=0))
amaxee <- kktchk(ansmax$par, maxfn, gr="grfwd", hess=NULL,  maximize=TRUE, control=list(trace=2))
ansmax<-optimr(xx, eefn, gr="grfwd", method="Rvmmin", control=list(trace=2))
ansmax<-optimr(xx, eefn, gr="grfwd", method="Rvmmin", control=list(trace=2))
print(ansmax)
maxfun(rep(1,6))
ansmaxee<-optimr(xx, eefn, gr="grfwd", method="Rvmmin", control=list(trace=2))
print(ansmaxee)
ls()
maxfn(par=1:6)
maxfn(1:6)
xx
ansmax<-optimr(xx,maxfn, gr="grfwd", method="Rvmmin", control=list(maximize=TRUE,trace=0))
print(ansmax)
ansmaxf<-optimr(xx,maxfn, gr="grfwd", method="Rvmmin", control=list(maximize=TRUE,trace=0))
print(ansmaxf)
# maxfn.R
##  author: John C. Nash
rm(list=ls())
require(optimx)
sessionInfo()
maxfn<-function(x) {
n<-length(x)
ss<-seq(1,n)
f<-10-(crossprod(x-ss))^2
f<-as.numeric(f)
return(f)
}
negmaxfn<-function(x) {
f<-(-1)*maxfn(x)
return(f)
}
cat("test that maximize=TRUE works correctly\n")
n<-6
xx<-rep(1,n)
ansmax<-optimr(xx,maxfn, gr="grfwd", method="Rvmmin", control=list(maximize=TRUE,trace=0))
ansmax<-optimr(xx,maxfn, gr="grfwd", method="Rvmmin", control=list(maximize=TRUE,trace=2))
# maxfn.R
##  author: John C. Nash
rm(list=ls())
require(optimx)
sessionInfo()
maxfn<-function(x) {
n<-length(x)
ss<-seq(1,n)
f<-10-(crossprod(x-ss))^2
f<-as.numeric(f)
return(f)
}
negmaxfn<-function(x) {
f<-(-1)*maxfn(x)
return(f)
}
cat("test that maximize=TRUE works correctly\n")
n<-6
xx<-rep(1,n)
ansmax<-optimr(xx,maxfn, gr="grfwd", method="Rvmmin", control=list(maximize=TRUE,trace=2))
# maxfn.R
##  author: John C. Nash
rm(list=ls())
require(optimx)
sessionInfo()
maxfn<-function(x) {
n<-length(x)
ss<-seq(1,n)
f<-10-(crossprod(x-ss))^2
f<-as.numeric(f)
return(f)
}
negmaxfn<-function(x) {
f<-(-1)*maxfn(x)
return(f)
}
cat("test that maximize=TRUE works correctly\n")
n<-6
xx<-rep(1,n)
ansmax<-optimr(xx,maxfn, gr="grfwd", method="Rvmmin", control=list(maximize=TRUE,trace=2))
# maxfn.R
##  author: John C. Nash
rm(list=ls())
require(optimx)
sessionInfo()
maxfn<-function(x) {
n<-length(x)
ss<-seq(1,n)
f<-10-(crossprod(x-ss))^2
f<-as.numeric(f)
return(f)
}
negmaxfn<-function(x) {
f<-(-1)*maxfn(x)
return(f)
}
cat("test that maximize=TRUE works correctly\n")
n<-6
xx<-rep(1,n)
ansmax<-optimr(xx,maxfn, gr="grfwd", method="Rvmmin", control=list(maximize=TRUE,trace=2))
print(ansmax)
ansmax<-optimr(xx,maxfn, gr="grfwd", method="Nelder-Mead", control=list(maximize=TRUE,trace=2, maxit=200))
print(ansmax)
ansmax<-optimr(xx,maxfn, gr="grfwd", method="Nelder-Mead", control=list(maximize=TRUE,trace=2, maxit=2000))
print(ansmax)
ansmaxn<-optimr(xx,negmaxfn, gr="grfwd", method="Nelder-Mead", control=list(maximize=TRUE,trace=2))
print(ansmaxn)
ansmaxn<-optimr(xx,negmaxfn, gr="grfwd", method="Nelder-Mead", control=list(maximize=FALSE, trace=2))
# THIS SHOULD FAIL
print(ansmaxn)
ansmaxboth<-optimr(xx,maxfn, gr="grfwd", method="Rvmmin", control=list(maximize=TRUE, fnscale=-1.0, trace=2))
print(ansmaxboth)
# 160706 -- not set up to maximize, except through optimr perhaps
n<-6
xx<-rep(1,n)
ansmax<-try(hjn(xx,maxfn, control=list(maximize=TRUE,trace=1, maxit=10, maxfeval=2000)))
print(ansmax)
maxall <- opm(xx, maxfn, gr="grfwd", method="ALL", control=list(maximize=TRUE))
summary(maxall, order=value)
?subplex
subplex(xx, maxfn, control=list(maximize=TRUE))
library(subplex)
subplex(xx, maxfn, control=list(maximize=TRUE))
subplex(xx, maxfn)
subplex(xx, negmaxfn)
maxfn(1:6)
maxall <- opm(xx, maxfn, gr="grfwd", method="ALL", control=list(maximize=TRUE))
ansmaxnmgood<-optimr(xx,negmaxfn, gr="grfwd", method="Nelder-Mead", control=list(maximize=FALSE,trace=2))
print(ansmaxnmgood)
ansmaxnmgood<-optimr(xx,negmaxfn, gr="grfwd", method="Nelder-Mead", control=list(maximize=FALSE,
fnscale=-1, trace=2))
print(ansmaxnmgood)
source("~/current/20211013optimx-variable-clash/optimx/tests/maxfn.R", echo=TRUE)
maxall
summary(maxall)
?hjn
ahjn<-hjn(xx, maxfn, control=list(trace=1))
ahjn
ahjn<-hjn(xx, negmaxfn, control=list(trace=1))
ahjn
ahjno<-optimr(xx, maxfn, control=list(trace=1, maximize=TRUE))
ahjno
source("~/current/20211013optimx-variable-clash/optimx/tests/maxfn.R", echo=TRUE)
summary(maxall, order=value)
# maxfn.R
##  author: John C. Nash
rm(list=ls())
cat("maxfn.R -- test that maximize=TRUE works correctly\n")
require(optimx)
sessionInfo()
maxfn<-function(x) {# fn to be MAXIMIZED
# max = 10 at 1:6
n<-length(x)
ss<-seq(1,n)
f<-10-(crossprod(x-ss))^2
f<-as.numeric(f)
return(f)
}
negmaxfn<-function(x) {# explicit negative of maxfn
f<-(-1)*maxfn(x)
return(f)
}
n<-4
xx<-rep(1,n) # start at all 1s
ansmax<-optimr(xx,maxfn, gr="grfwd", method="Rvmmin", control=list(maximize=TRUE,trace=2))
print(ansmax) # should work OK
# specifying both maximize and fnscale gives maximize precedence with no message
ansmaxboth<-optimr(xx,maxfn, gr="grfwd", method="Rvmmin", control=list(maximize=TRUE, fnscale=-1.0, trace=2))
print(ansmaxboth)
cat("using the negmax function should give same parameters\n")
ansnegmax<-optimr(xx,negmaxfn, gr="grfwd",  method="Rvmmin", control=list(trace=0))
print(ansnegmax)# function value should be -10 however
ansmaxnm<-optimr(xx,maxfn, gr="grfwd", method="Nelder-Mead", control=list(maximize=TRUE,trace=2, maxit=2000))
print(ansmaxnm)# try with Nelder-Mead
ansmaxnmbad<-optimr(xx,negmaxfn, gr="grfwd", method="Nelder-Mead", control=list(maximize=TRUE,trace=2))
# THIS SHOULD FAIL UNBOUNDED
print(ansmaxnmbad)
# control$maximize takes precedence over control$fnscale=-1.
ansmaxnmgood<-optimr(xx,negmaxfn, gr="grfwd", method="Nelder-Mead", control=list(maximize=FALSE,
fnscale=-1, trace=2))
print(ansmaxnmgood)
maxall <- opm(xx, maxfn, gr="grfwd", method="ALL", control=list(maximize=TRUE))
summary(maxall, order=value)
cl <- ctrldefault()
cl <- ctrldefault(4)
cl
cl$allmeth
tm<-cl$allmeth
tm[-"snewton"]
tm[-which(tm=="snewton")]
tm[-which("snewton" %in% tm)]
# maxfn.R
##  author: John C. Nash
rm(list=ls())
cat("maxfn.R -- test that maximize=TRUE works correctly\n")
require(optimx)
sessionInfo()
maxfn<-function(x) {# fn to be MAXIMIZED
# max = 10 at 1:6
n<-length(x)
ss<-seq(1,n)
f<-10-(crossprod(x-ss))^2
f<-as.numeric(f)
return(f)
}
negmaxfn<-function(x) {# explicit negative of maxfn
f<-(-1)*maxfn(x)
return(f)
}
n<-4
xx<-rep(1,n) # start at all 1s
ansmax<-optimr(xx,maxfn, gr="grfwd", method="Rvmmin", control=list(maximize=TRUE,trace=2))
print(ansmax) # should work OK
# specifying both maximize and fnscale gives maximize precedence with no message
ansmaxboth<-optimr(xx,maxfn, gr="grfwd", method="Rvmmin", control=list(maximize=TRUE, fnscale=-1.0, trace=2))
print(ansmaxboth)
cat("using the negmax function should give same parameters\n")
ansnegmax<-optimr(xx,negmaxfn, gr="grfwd",  method="Rvmmin", control=list(trace=0))
print(ansnegmax)# function value should be -10 however
ansmaxnm<-optimr(xx,maxfn, gr="grfwd", method="Nelder-Mead", control=list(maximize=TRUE,trace=2, maxit=2000))
print(ansmaxnm)# try with Nelder-Mead
ansmaxnmbad<-optimr(xx,negmaxfn, gr="grfwd", method="Nelder-Mead", control=list(maximize=TRUE,trace=2))
# THIS SHOULD FAIL UNBOUNDED
print(ansmaxnmbad)
# control$maximize takes precedence over control$fnscale=-1.
ansmaxnmgood<-optimr(xx,negmaxfn, gr="grfwd", method="Nelder-Mead", control=list(maximize=FALSE,
fnscale=-1, trace=2))
print(ansmaxnmgood)
maxall <- opm(xx, maxfn, gr="grfwd", method="ALL", control=list(maximize=TRUE))
summary(maxall, order=value)
tm <- ctrldefault(4)$allmeth
("snewton" %in% tm)
("snewtonm" %in% tm)
("snewt" %in% tm)
source("~/current/20211013optimx-variable-clash/optimx/tests/maxfn.R", echo=TRUE)
maxall <- opm(xx, maxfn, gr="grfwd", method="ALL", control=list(maximize=TRUE))
summary(maxall, order=value)
maxall <- opm(xx, maxfn, gr="grfwd", method="ALL", control=list(maximize=TRUE))
summary(maxall, order=value)
n<-4
xx<-rep(1,n) # start at all 1s
ansmax<-optimr(xx,maxfn, gr="grfwd", method="Rvmmin", control=list(maximize=TRUE,trace=2))
print(ansmax) # should work OK
# specifying both maximize and fnscale gives maximize precedence with no message
ansmaxboth<-optimr(xx,maxfn, gr="grfwd", method="Rvmmin", control=list(maximize=TRUE, fnscale=-1.0, trace=2))
print(ansmaxboth)
cat("using the negmax function should give same parameters\n")
ansnegmax<-optimr(xx,negmaxfn, gr="grfwd",  method="Rvmmin", control=list(trace=0))
print(ansnegmax)# function value should be -10 however
ansmaxnm<-optimr(xx,maxfn, gr="grfwd", method="Nelder-Mead", control=list(maximize=TRUE,trace=2, maxit=2000))
print(ansmaxnm)# try with Nelder-Mead
ansmaxnmbad<-optimr(xx,negmaxfn, gr="grfwd", method="Nelder-Mead", control=list(maximize=TRUE,trace=2))
# THIS SHOULD FAIL UNBOUNDED
print(ansmaxnmbad)
# control$maximize takes precedence over control$fnscale=-1.
ansmaxnmgood<-optimr(xx,negmaxfn, gr="grfwd", method="Nelder-Mead", control=list(maximize=FALSE,
fnscale=-1, trace=2))
print(ansmaxnmgood)
maxall <- opm(xx, maxfn, gr="grfwd", method="ALL", control=list(maximize=TRUE))
summary(maxall, order=value)
# maxfn.R
##  author: John C. Nash
rm(list=ls())
cat("maxfn.R -- test that maximize=TRUE works correctly\n")
require(optimx)
sessionInfo()
maxfn<-function(x) {# fn to be MAXIMIZED
# max = 10 at 1:6
n<-length(x)
ss<-seq(1,n)
f<-10-(crossprod(x-ss))^2
f<-as.numeric(f)
return(f)
}
negmaxfn<-function(x) {# explicit negative of maxfn
f<-(-1)*maxfn(x)
return(f)
}
n<-4
xx<-rep(1,n) # start at all 1s
maxall <- opm(xx, maxfn, gr="grfwd", method="ALL", control=list(maximize=TRUE))
summary(maxall, order=value)
# maxfn.R
##  author: John C. Nash
rm(list=ls())
cat("maxfn.R -- test that maximize=TRUE works correctly\n")
require(optimx)
sessionInfo()
maxfn<-function(x) {# fn to be MAXIMIZED
# max = 10 at 1:6
n<-length(x)
ss<-seq(1,n)
f<-10-(crossprod(x-ss))^2
f<-as.numeric(f)
return(f)
}
negmaxfn<-function(x) {# explicit negative of maxfn
f<-(-1)*maxfn(x)
return(f)
}
n<-4
xx<-rep(1,n) # start at all 1s
maxall <- opm(xx, maxfn, gr="grfwd", method="ALL", control=list(maximize=TRUE))
summary(maxall, order=value)
# maxfn.R
##  author: John C. Nash
rm(list=ls())
cat("maxfn.R -- test that maximize=TRUE works correctly\n")
require(optimx)
sessionInfo()
maxfn<-function(x) {# fn to be MAXIMIZED
# max = 10 at 1:6
n<-length(x)
ss<-seq(1,n)
f<-10-(crossprod(x-ss))^2
f<-as.numeric(f)
return(f)
}
negmaxfn<-function(x) {# explicit negative of maxfn
f<-(-1)*maxfn(x)
return(f)
}
n<-4
xx<-rep(1,n) # start at all 1s
maxall <- opm(xx, maxfn, gr="grfwd", method="ALL", control=list(maximize=TRUE))
summary(maxall, order=value)
?maxall$convergence
str(maxall)
# maxfn.R
##  author: John C. Nash
rm(list=ls())
cat("maxfn.R -- test that maximize=TRUE works correctly\n")
require(optimx)
sessionInfo()
maxfn<-function(x) {# fn to be MAXIMIZED
# max = 10 at 1:6
n<-length(x)
ss<-seq(1,n)
f<-10-(crossprod(x-ss))^2
f<-as.numeric(f)
return(f)
}
negmaxfn<-function(x) {# explicit negative of maxfn
f<-(-1)*maxfn(x)
return(f)
}
n<-4
xx<-rep(1,n) # start at all 1s
maxall <- opm(xx, maxfn, gr="grfwd", method="ALL", control=list(maximize=TRUE))
summary(maxall, order=value)
# maxfn.R
##  author: John C. Nash
rm(list=ls())
cat("maxfn.R -- test that maximize=TRUE works correctly\n")
require(optimx)
sessionInfo()
maxfn<-function(x) {# fn to be MAXIMIZED
# max = 10 at 1:6
n<-length(x)
ss<-seq(1,n)
f<-10-(crossprod(x-ss))^2
f<-as.numeric(f)
return(f)
}
negmaxfn<-function(x) {# explicit negative of maxfn
f<-(-1)*maxfn(x)
return(f)
}
n<-4
xx<-rep(1,n) # start at all 1s
ansconflict<-optimr(xx,maxfn, gr="grfwd", method="Rvmmin", control=list(maximize=TRUE, fnscale=1, trace=2))
ansconf1<-optimr(xx,maxfn, gr="grfwd", method="Rvmmin", control=list(maximize=TRUE, fnscale=1))
print(ansconf1) # should work OK
ansconf2<-optimr(xx,maxfn, gr="grfwd", method="Rvmmin", control=list(maximize=FALSE, fnscale=-1))
print(ansconf2) # should work OK
# maxfn.R
##  author: John C. Nash
rm(list=ls())
cat("maxfn.R -- test that maximize=TRUE works correctly\n")
require(optimx)
sessionInfo()
maxfn<-function(x) {# fn to be MAXIMIZED
# max = 10 at 1:n
n<-length(x)
ss<-seq(1,n)
f<-10-(crossprod(x-ss))^2
f<-as.numeric(f)
return(f)
}
negmaxfn<-function(x) {# explicit negative of maxfn
f<-(-1)*maxfn(x)
return(f)
}
n<-4
xx<-rep(1,n) # start at all 1s
ansconf1<-optimr(xx,maxfn, gr="grfwd", method="Rvmmin", control=list(maximize=TRUE, fnscale=1))
print(ansconf1) # should work OK
ansconf2<-optimr(xx,maxfn, gr="grfwd", method="Rvmmin", control=list(maximize=FALSE, fnscale=-1))
print(ansconf2) # should work OK
maxall <- opm(xx, maxfn, gr="grfwd", method="ALL", control=list(maximize=TRUE))
summary(maxall, order=value)
# maxfn.R
##  author: John C. Nash
rm(list=ls())
cat("maxfn.R -- test that maximize=TRUE works correctly\n")
require(optimx)
sessionInfo()
maxfn<-function(x) {# fn to be MAXIMIZED
# max = 10 at 1:n
n<-length(x)
ss<-seq(1,n)
f<-10-(crossprod(x-ss))^2
f<-as.numeric(f)
return(f)
}
negmaxfn<-function(x) {# explicit negative of maxfn
f<-(-1)*maxfn(x)
return(f)
}
n<-4
xx<-rep(1,n) # start at all 1s
# Conflicting controls -- 'maximize' takes precedence over 'fnscale'
ansconf1<-optimr(xx,maxfn, gr="grfwd", method="Rvmmin", control=list(maximize=TRUE, fnscale=1))
print(ansconf1) # should work OK
ansconf2<-optimr(xx,maxfn, gr="grfwd", method="Rvmmin", control=list(maximize=FALSE, fnscale=-1))
print(ansconf2) # should work OK
maxall <- opm(xx, maxfn, gr="grfwd", method="ALL", control=list(maximize=TRUE))
summary(maxall, order=value)
# maxfn.R
##  author: John C. Nash
rm(list=ls())
cat("maxfn.R -- test that maximize=TRUE works correctly\n")
require(optimx)
sessionInfo()
maxfn<-function(x) {# fn to be MAXIMIZED
# max = 10 at 1:n
n<-length(x)
ss<-seq(1,n)
f<-10-(crossprod(x-ss))^2
f<-as.numeric(f)
return(f)
}
negmaxfn<-function(x) {# explicit negative of maxfn
f<-(-1)*maxfn(x)
return(f)
}
n<-4
xx<-rep(1,n) # start at all 1s
# Conflicting controls -- 'maximize' takes precedence over 'fnscale'
ansconf1<-optimr(xx,maxfn, gr="grfwd", method="Rvmmin", control=list(maximize=TRUE, fnscale=1))
print(ansconf1) # should work OK
ansconf2<-optimr(xx,maxfn, gr="grfwd", method="Rvmmin", control=list(maximize=FALSE, fnscale=-1))
print(ansconf2) # should work OK
maxall <- opm(xx, maxfn, gr="grfwd", method="ALL", control=list(maximize=TRUE))
summary(maxall, order=value)
xbest <- 1:4
tkkt <- kktchk(xbest, maxfn, maximize=TRUE, control=list(trace=1))
tkkt <- kktchk(xbest, maxfn, gr=NULL, maximize=TRUE, control=list(trace=1))
tkkt <- kktchk(xbest, maxfn, gr="grfwd", maximize=TRUE, control=list(trace=1))
tkkt <- kktchk(xbest, maxfn, gr="grcentral", maximize=TRUE, control=list(trace=1))
tkkt <- kktchk(xbest, negmaxfn, gr="grcentral", control=list(trace=1))
