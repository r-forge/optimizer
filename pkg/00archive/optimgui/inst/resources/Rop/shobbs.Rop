#@ <?xml version="1.0"?>
#@ <Roptimgui>
#@   <catalog>
#@     <description itemname="Number of Parameters" value="3"/>
#@     <description itemname="Gradient" value="continuous"/>
#@     <description itemname="Hessian" value="continuous"/>
#@     <description itemname="Constraint" value="none"/>
#@   </catalog>
#@   <tab tabname="Description">
#@     <title>Scaled Hobbs weeds problem</title>
#@     <label>
#@     This is an example of what might be used to define problems in a
#@     catalog that is presented by the Yixuan Qiu / John Nash optimgui
#@     package.
#@     
#@     This example aims at fitting a nonlinear curve with 3 unknown
#@     parameters. The objective function is the sum of squared residuals,
#@     which has continuous first and second derivatives w.r.t. parameters.
#@     Parameters have no constraints.
#@     </label>
#@   </tab>
#@   <tab tabname="Objective">
#@     <title>Objective Function</title>
#@     <rcode>
## Scaled Hobbs weeds problem -- function
shobbs.f<-function(x){
    if (abs(12*x[3]*0.1) > 500) { # Check computability
       fbad<-.Machine$double.xmax
       return(fbad)
    }
    res<-shobbs.res(x)
    f<-sum(res*res)
}
#@     </rcode>
#@   </tab>
#@   <tab tabname="Residuals">
#@     <title>Residuals</title>
#@     <label>
#@     Residuals are used in nonlinear least squares problems. However the
#@     form given in the code block below is not the same as used by the
#@     nls() function in R. It would be very nice to have a mechanism to
#@     convert between expressions and functions of this type. Note that R
#@     has some tools for doing this, but work is needed to ensure the
#@     results are operational in both optimx() and nls().
#@     </label>
#@     <rcode>
## Scaled Hobbs weeds problem -- residual
shobbs.res<-function(x){
# This variant uses looping
    if(length(x) != 3) stop("shobbs.res -- parameter vector n!=3")
    y<-c(5.308, 7.24, 9.638, 12.866, 17.069, 23.192, 31.443, 38.558,
         50.156, 62.948, 75.995, 91.972)
    t<-1:12
    res<-100.0*x[1]/(1+x[2]*10.*exp(-0.1*x[3]*t)) - y
}
#@     </rcode>
#@   </tab>
#@   <tab tabname="Jacobian">
#@     <title>Jacobian Matrix</title>
#@     <label>
#@     The Jacobian matrix is the set of partial derivatives of residuals
#@     w.r.t. parameters. There is one row for each of m residuals and one
#@     column for each of n parameters.
#@     </label>
#@     <rcode>
## Scaled Hobbs weeds problem -- Jacobian
shobbs.jac<-function(x) {
    jj<-matrix(0.0, 12, 3)
    t<-1:12
    yy<-exp(-0.1*x[3]*t)
    zz<-100.0/(1+10.*x[2]*yy)
    jj[t,1] <- zz
    jj[t,2] <- -0.1*x[1]*zz*zz*yy
    jj[t,3] <- 0.01*x[1]*zz*zz*yy*x[2]*t
    return(jj)
}
#@     </rcode>
#@   </tab>
#@   <tab tabname="Gradient">
#@     <title>Gradient</title>
#@     <rcode>
## Scaled Hobbs weeds problem -- gradient
shobbs.g <- function(x) {
   shj<-shobbs.jac(x)
   shres<-shobbs.res(x)
   shg<-as.vector(2.0* (shres %*% shj))
   return(shg)
}
#@     </rcode>
#@   </tab>
#@   <tab tabname="RSD">
#@     <title>Second Derivatives of the Residuals</title>
#@     <label>
#@     The array of second derivatives of the residuals w.r.t. the
#@     parameters. This has 3 dimensions. There is a slice that is n * n
#@     symmetric for the partial derivatives of r[i] with respect to the
#@     parameters e.g., RSD[i, j, k] is the partial derivative of r[i]
#@     w.r.t. parameters j and k.
#@     
#@     Used to generate Hessian as J' * J + r' RSD (with proper
#@     conformation) for sums of squares problems.
#@     
#@     To be added.
#@     </label>
#@   </tab>
#@   <tab tabname="Data">
#@     <title>Data</title>
#@     <label>
#@     Not strictly needed for this problem.
#@     </label>
#@     <rcode>
## Scaled Hobbs weeds problem -- data
shobbs.data<-function(file=NULL){
    y<-c(5.308, 7.24, 9.638, 12.866, 17.069, 23.192, 31.443,
         38.558, 50.156, 62.948, 75.995, 91.972)
    t<-1:12
    probdata<-data.frame(t,y)
}
#@     </rcode>
#@   </tab>
#@   <tab tabname="Parameters">
#@     <title>Initial Values and Constraints for Parameters</title>
#@     <label>
#@     Initial value and constraints.
#@     </label>
#@     <rcode>
xstart <- c(1, 1, 1)
#@     </rcode>
#@   </tab>
#@   <tab tabname="Run">
#@     <title>The Running Code of Optimization</title>
#@     <rcode>
# Should be generated by clicking the "Choose method" button.
#@     </rcode>
#@   </tab>
#@ </Roptimgui>
