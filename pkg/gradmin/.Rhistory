cat("Initial Rbk fn=",rbk.f(xr),"\n")
cat("Initial gradient =")
print(grv)
lnsrch<-function(fn, fbest, xc, d, grv, ...) { # backtrack line search
flsch<-function(st) {
# computes the function value at stepsize st on line (xc + gm*d)
# Essentially flsch(st)
# gm: step size
# fn: objective function
# xc: base set of parameters
# d : search direction
nf <- nf +1
fval<-fn(xc+st*d,...)
fval
}
st <- 1.0
gproj <- as.numeric(crossprod(grv, xc) )
repeat {
xnew <- xc + st*d # new point
if ((offset+xnew) == (offset+xc)) { # no better parameters
st <- 0
rlout <- st
attr(rlout,"Fval")<-fbest # Assume we pass this in
return(rlout)
}
fval <- flsch(xnew, ...)
if (control$trace > 1) cat("Step = ",st," fval = ",fval,"\n")
if (fval <= fbest + acctol*st*gproj) break
st <- stepdec*st # new step
}
rlout <- st
attr(rlout, "Fval")<- fval
rlout
} # end backtrack line search
f0 <- rbk.f(xr)+1
f0
cat("f0=",f0,"\n")
tr <- lnsrch(rbk.f, f0, xr, dr, grv)
source('~/rsvnall/optimizer/pkg/snewton/inst/devfiles/tbtrack.R')
source('~/rsvnall/optimizer/pkg/snewton/inst/devfiles/tbtrack.R')
xmew
offset
lnsrch<-function(fn, fbest, xc, d, grv, ...) { # backtrack line search
flsch<-function(st) {
# computes the function value at stepsize st on line (xc + gm*d)
# Essentially flsch(st)
# gm: step size
# fn: objective function
# xc: base set of parameters
# d : search direction
nf <- nf +1
fval<-fn(xc+st*d,...)
fval
}
st <- 1.0
gproj <- as.numeric(crossprod(grv, xc) )
repeat {
xnew <- xc + st*d # new point
if ((control$offset+xnew) == (control$offset+xc)) { # no better parameters
st <- 0
rlout <- st
attr(rlout,"Fval")<-fbest # Assume we pass this in
return(rlout)
}
fval <- flsch(xnew, ...)
if (control$trace > 1) cat("Step = ",st," fval = ",fval,"\n")
if (fval <= fbest + acctol*st*gproj) break
st <- stepdec*st # new step
}
rlout <- st
attr(rlout, "Fval")<- fval
rlout
} # end backtrack line search
f0 <- rbk.f(xr)+1
f0
cat("f0=",f0,"\n")
tr <- lnsrch(rbk.f, f0, xr, dr, grv)
source('~/rsvnall/optimizer/pkg/snewton/inst/devfiles/tbtrack.R')
source('~/rsvnall/optimizer/pkg/snewton/inst/devfiles/tbtrack.R')
source('~/rsvnall/optimizer/pkg/snewton/inst/devfiles/tbtrack.R')
source('~/rsvnall/optimizer/pkg/snewton/inst/devfiles/tbtrack.R')
source('~/rsvnall/optimizer/pkg/snewton/inst/devfiles/tbtrack.R')
source('~/rsvnall/optimizer/pkg/snewton/inst/devfiles/tbtrack.R')
source('~/rsvnall/optimizer/pkg/snewton/inst/devfiles/tbtrack.R')
source('~/rsvnall/optimizer/pkg/snewton/inst/devfiles/tbtrack.R')
source('~/rsvnall/optimizer/pkg/snewton/inst/devfiles/tbtrack.R')
source('~/rsvnall/optimizer/pkg/snewton/inst/devfiles/tbtrack.R')
source('~/rsvnall/optimizer/pkg/snewton/inst/devfiles/tdlsch.R')
source('~/rsvnall/optimizer/pkg/snewton/R/SNewton.R')
source('~/rsvnall/optimizer/pkg/snewton/inst/devfiles/tdlsch.R')
source('~/rsvnall/optimizer/pkg/snewton/inst/devfiles/tdlsch.R')
source('~/rsvnall/optimizer/pkg/snewton/inst/devfiles/tdlsch.R')
source('~/rsvnall/optimizer/pkg/snewton/inst/devfiles/tdlsch.R')
source('~/rsvnall/optimizer/pkg/snewton/inst/devfiles/tdlsch.R')
source('~/rsvnall/optimizer/pkg/snewton/inst/devfiles/tdlsch.R')
source('~/rsvnall/optimizer/pkg/snewton/inst/devfiles/tdlsch.R')
source('~/rsvnall/optimizer/pkg/snewton/inst/devfiles/tdlsch.R')
?optimize
source('~/rsvnall/optimizer/pkg/snewton/inst/devfiles/tdlsch.R')
source('~/rsvnall/optimizer/pkg/snewton/inst/devfiles/tdlsch.R')
source('~/rsvnall/optimizer/pkg/snewton/inst/devfiles/tdlsch.R')
ls()
wood.f(xw+1.5*dw)
wood.f(xw+1.*dw)
source('~/rsvnall/optimizer/pkg/snewton/inst/devfiles/tdlsch.R')
source('~/rsvnall/optimizer/pkg/snewton/inst/devfiles/tdlsch.R')
source('~/rsvnall/optimizer/pkg/snewton/inst/devfiles/tdlsch.R')
source('~/rsvnall/optimizer/pkg/snewton/inst/devfiles/tdlsch.R')
source('~/rsvnall/optimizer/pkg/snewton/inst/devfiles/tdlsch.R')
source('~/rsvnall/optimizer/pkg/snewton/inst/devfiles/tdlsch.R')
source('~/rsvnall/optimizer/pkg/snewton/inst/devfiles/tdlsch.R')
source('~/rsvnall/optimizer/pkg/snewton/inst/devfiles/tdlsch.R')
source('~/rsvnall/optimizer/pkg/snewton/inst/devfiles/tdlsch.R')
source('~/rsvnall/optimizer/pkg/snewton/inst/devfiles/tdlsch.R')
source('~/rsvnall/optimizer/pkg/snewton/inst/devfiles/tdlsch.R')
source('~/rsvnall/optimizer/pkg/snewton/inst/devfiles/tdlsch.R')
source('~/rsvnall/optimizer/pkg/snewton/inst/devfiles/tdlsch.R')
source('~/rsvnall/optimizer/pkg/snewton/inst/devfiles/tdlsch.R')
source('~/rsvnall/optimizer/pkg/snewton/inst/devfiles/tdlsch.R')
source('~/rsvnall/optimizer/pkg/snewton/inst/devfiles/tdlsch.R')
?pracma:fminbnd
source('~/rsvnall/optimizer/pkg/snewton/inst/devfiles/tdlsch.R')
source('~/rsvnall/optimizer/pkg/snewton/R/SNewton.R')
rbk.f <- function(x){
return(100*(x[2] - x[1]*x[1])^2 + (1-x[1])^2)
}
rbk.g <- function(x){
return(c(-400*x[1]*(x[2] - x[1]*x[1]) - 2*(1-x[1]), 200*(x[2] - x[1]*x[1])))
}
rbk.h <- function(x) {
a11 <- 2 - 400*x[2] + 1200*x[1]*x[1]; a21 <- -400*x[1]
return(matrix(c(a11, a21, a21, 200), 2, 2))
}
xr <- c(-1.2, 1)
sol <- snewton(xr, rbk.f, rbk.g, rbk.f)
xr
rbk.f
rbk.g
rbk.h
sol <- snewton(xr, rbk.f, rbk.g, rbk.h)
source('~/rsvnall/optimizer/pkg/snewton/R/SNewton.R')
sol <- snewton(xr, rbk.f, rbk.g, rbk.h)
source('~/rsvnall/optimizer/pkg/snewton/R/SNewton.R')
sol <- snewton(xr, rbk.f, rbk.g, rbk.h)
source('~/rsvnall/optimizer/pkg/snewton/R/SNewton.R')
sol <- snewton(xr, rbk.f, rbk.g, rbk.h)
source('~/rsvnall/optimizer/pkg/snewton/R/SNewton.R')
sol <- snewton(xr, rbk.f, rbk.g, rbk.h)
source('~/rsvnall/optimizer/pkg/snewton/R/SNewton.R')
sol <- snewton(xr, rbk.f, rbk.g, rbk.h)
ls()
rm(control)
ls()
sol <- snewton(xr, rbk.f, rbk.g, rbk.h)
ls()
rm(list=ls())
source('~/rsvnall/optimizer/pkg/snewton/R/SNewton.R')
ls()
rbk.f <- function(x){
return(100*(x[2] - x[1]*x[1])^2 + (1-x[1])^2)
}
rbk.g <- function(x){
return(c(-400*x[1]*(x[2] - x[1]*x[1]) - 2*(1-x[1]), 200*(x[2] - x[1]*x[1])))
}
rbk.h <- function(x) {
a11 <- 2 - 400*x[2] + 1200*x[1]*x[1]; a21 <- -400*x[1]
return(matrix(c(a11, a21, a21, 200), 2, 2))
}
xr <- c(-1.2, 1)
sol <- snewton(xr, rbk.f, rbk.g, rbk.h)
nf <- 0
sol <- snewton(xr, rbk.f, rbk.g, rbk.h)
source('~/rsvnall/optimizer/pkg/snewton/R/SNewton.R')
sol <- snewton(xr, rbk.f, rbk.g, rbk.h)
source('~/rsvnall/optimizer/pkg/snewton/R/SNewton.R')
sol <- snewton(xr, rbk.f, rbk.g, rbk.h)
source('~/rsvnall/optimizer/pkg/snewton/R/SNewton.R')
sol <- snewton(xr, rbk.f, rbk.g, rbk.h)
source('~/rsvnall/optimizer/pkg/snewton/R/SNewton.R')
sol <- snewton(xr, rbk.f, rbk.g, rbk.h)
source('~/rsvnall/optimizer/pkg/snewton/R/SNewton.R')
sol <- snewton(xr, rbk.f, rbk.g, rbk.h)
source('~/rsvnall/optimizer/pkg/snewton/R/SNewton.R')
sol <- snewton(xr, rbk.f, rbk.g, rbk.h)
source('~/rsvnall/optimizer/pkg/snewton/R/SNewton.R')
sol <- snewton(xr, rbk.f, rbk.g, rbk.h)
source('~/rsvnall/optimizer/pkg/snewton/R/SNewton.R')
sol <- snewton(xr, rbk.f, rbk.g, rbk.h)
source('~/rsvnall/optimizer/pkg/snewton/R/SNewton.R')
sol <- snewton(xr, rbk.f, rbk.g, rbk.h)
source('~/rsvnall/optimizer/pkg/snewton/R/SNewton.R')
sol <- snewton(xr, rbk.f, rbk.g, rbk.h)
source('~/rsvnall/optimizer/pkg/snewton/R/SNewton.R')
source('~/rsvnall/optimizer/pkg/snewton/R/SNewton.R')
source('~/temp/brentmin/fminsfp.R')
source('~/temp/brentmin/fminsfp.R')
source('~/temp/brentmin/fminsfp.R')
f <- function(x) exp(x)*sin(3*x)*tanh(5*cos(30*x))
sfsp <- fminsfp(f, 0, 1)
source('~/temp/brentmin/fminsfp.R')
f <- function(x) exp(x)*sin(3*x)*tanh(5*cos(30*x))
sfsp <- fminsfp(f, 0, 1)
source('~/temp/brentmin/fminsfp.R')
f <- function(x) exp(x)*sin(3*x)*tanh(5*cos(30*x))
sfsp <- fminsfp(f, 0, 1)
source('~/temp/brentmin/fminsfp.R')
source('~/temp/brentmin/fminsfp.R')
f <- function(x) exp(x)*sin(3*x)*tanh(5*cos(30*x))
sfsp <- fminsfp(f, 0, 1)
source('~/temp/brentmin/fminsfp.R')
f <- function(x) exp(x)*sin(3*x)*tanh(5*cos(30*x))
source('~/temp/brentmin/fminsfp.R')
sfsp <- fminsfp(f, 0, 1)
source('~/temp/brentmin/fminsfp.R')
source('~/temp/brentmin/fminsfp.R')
sfsp <- fminsfp(f, 0, 1)
source('~/temp/brentmin/fminsfp.R')
f <- function(x) exp(x)*sin(3*x)*tanh(5*cos(30*x))
sfsp <- fminsfp(f, 0, 1)
source('~/temp/brentmin/fminsfp.R')
sfsp <- fminsfp(f, 0, 1)
source('~/temp/brentmin/fminsfp.R')
sfsp <- fminsfp(f, 0, 1)
sfsp
source('~/temp/brentmin/fminsfp.R')
sfsp <- fminsfp(f, 0, 1)
sfsp <- fminsfp(f, 0, 1)
f <- function(x) exp(x)*sin(3*x)*tanh(5*cos(30*x))
sfsp <- fminsfp(f, 0, 1)
print(sfsp)
fn <- function(x, ...){
yy <- 1:length(x)
val <- sum((yy*x)^2)
}
x0<-c(1,2,3,4)
fn(x0)
print(fn(x0))
sum(x0^3)
sum(x0^4)
fnt <- function(x, ...){
yy <- 1:length(x)
val <- sum((yy*x)^2)
}
grt <- function(x, ...){
nn <- 1:lenght(x)
yy <- 1:nn
gg <- rep(NA,nn)
gg <- 2*yy*x
gg
}
grt(x0)
nn <- 1:length(x)
grt <- function(x, ...){
nn <- 1:length(x)
yy <- 1:nn
gg <- rep(NA,nn)
gg <- 2*yy*x
gg
}
grt(x0)
x <- x0
x
nn <- length(x)
nn
yy <- 1:nn
yy
yy*x
2*yy*x
grt <- function(x, ...){
nn <- 1:length(x)
yy <- 1:nn
#    gg <- rep(NA,nn)
gg <- 2*yy*x
gg
}
grt(x0)
print(grt(x0))
grt <- function(x, ...){
nn <- 1:length(x)
yy <- 1:nn
#    gg <- rep(NA,nn)
gg <- 2*(yy*x)
gg
}
print(grt(x0))
x
yy
nn:1
fnt <- function(x, ...){
yy <- length(x):1
val <- sum((yy*x)^2)
}
grt <- function(x, ...){
nn <- length(x)
yy <- nn:1
#    gg <- rep(NA,nn)
gg <- (yy*x)
gg
}
fnt(x0)
print(fnt(x0))
print(grt(x0))
library(numDeriv)
gn <- grad(fnt, x0)
gn
grt <- function(x, ...){
nn <- length(x)
yy <- nn:1
#    gg <- rep(NA,nn)
gg <- 2*yy*x
gg
}
grt <- function(x, ...){
nn <- length(x)
yy <- nn:1
#    gg <- rep(NA,nn)
gg <- 2*(yy^2)*x
gg
}
gn <- grad(fnt, x0)
gn
print(grt(x0))
hh <- matrix(NA, nrow=nn, ncol=nn)
hh
hesst <- function(x, fscale=10){
nn <- length(x)
hh <- matrix((2*fscale*yy^2), nrow=nn, ncol=nn)
hh
}
hesst
hesst(x0)
hesst <- function(x, fscale=10){
nn <- length(x)
hh <- diag(2*yy^2*fscale)
hh
}
hesst(x0)
hn <- hessian(fnt, x0)
hn
yy
yy<-4:1
hesst <- function(x, fscale=10){
nn <- length(x)
yy <- nn:1
hh <- diag(2*yy^2*fscale)
hh
}
hesst(x0)
ht <- hesst(x0)
ht - hn
hn
fnt
fnt <- function(x, fscale=10){
yy <- length(x):1
val <- sum((yy*x)^2)*fscale
}
hn <- hessian(fnt, x0)
hn
hn-ht
source('~/rsvnall/optimizer/pkg/snewton/R/gradminu.R')
source('~/rsvnall/optimizer/pkg/snewton/R/gradminu.R')
source('~/rsvnall/optimizer/pkg/snewton/R/gradminu.R')
source('~/rsvnall/optimizer/pkg/snewton/R/gradminu.R')
source('~/rsvnall/optimizer/pkg/snewton/R/gradminu.R')
source('~/rsvnall/optimizer/pkg/snewton/R/gradminu.R')
source('~/rsvnall/optimizer/pkg/gradmin/R/gradminu.R')
source('~/rsvnall/optimizer/pkg/gradmin/R/gradminu.R')
source('~/rsvnall/optimizer/pkg/gradmin/R/gradminu.R')
f <- function(x){
return(100*(x[2] - x[1]*x[1])^2 + (1-x[1])^2)
}
gr <- function(x){
return(c(-400*x[1]*(x[2] - x[1]*x[1]) - 2*(1-x[1]), 200*(x[2] - x[1]*x[1])))
}
h <- function(x) {
a11 <- 2 - 400*x[2] + 1200*x[1]*x[1]; a21 <- -400*x[1]
return(matrix(c(a11, a21, a21, 200), 2, 2))
}
fg <- function(x){ #function and gradient
val <- f(x)
attr(val,"gradient") <- gr(x)
val
}
fgh <- function(x){ #function and gradient
val <- f(x)
attr(val,"gradient") <- gr(x)
attr(val,"hessian") <- h(x)
val
}
x0 <- c(-1.2, 1)
sdefault <- gradmin(x0, fn=f, gr=gr, hess=h, control=list(trace=TRUE))
sdefault <- gradminu(x0, fn=f, gr=gr, hess=h, control=list(trace=TRUE))
source('~/rsvnall/optimizer/pkg/gradmin/R/lsnone.R')
sdefault <- gradminu(x0, fn=f, gr=gr, hess=h, control=list(trace=TRUE))
ls
ls()
source('~/rsvnall/optimizer/pkg/gradmin/R/lsbrent.R')
source('~/rsvnall/optimizer/pkg/gradmin/R/gradminu.R')
sdefault <- gradminu(x0, fn=f, gr=gr, hess=h, control=list(trace=TRUE))
vwr <- getoption("viewer")
vwr <- getOption("viewer")
str(vwr)
f <- function(x){
return(100*(x[2] - x[1]*x[1])^2 + (1-x[1])^2)
}
gr <- function(x){
return(c(-400*x[1]*(x[2] - x[1]*x[1]) - 2*(1-x[1]), 200*(x[2] - x[1]*x[1])))
}
h <- function(x) {
a11 <- 2 - 400*x[2] + 1200*x[1]*x[1]; a21 <- -400*x[1]
return(matrix(c(a11, a21, a21, 200), 2, 2))
}
fg <- function(x){ #function and gradient
val <- f(x)
attr(val,"gradient") <- gr(x)
val
}
fgh <- function(x){ #function and gradient
val <- f(x)
attr(val,"gradient") <- gr(x)
attr(val,"hessian") <- h(x)
val
}
x0 <- c(-1.2, 1)
sdefault <- gradminu(x0, fn=f, gr=gr, hess=h, control=list(trace=TRUE))
source('~/rsvnall/optimizer/pkg/gradmin/R/gradminu.R')
source('~/rsvnall/optimizer/pkg/gradmin/R/lsback.R')
sdefault <- gradminu(x0, fn=f, gr=gr, hess=h, control=list(trace=TRUE))
wood.g <- function(x){
g1 <- 400*x[1]^3-400*x[1]*x[2]+2*x[1]-2
g2 <- -200*x[1]^2+220.2*x[2]+19.8*x[4]-40
g3 <- 360*x[3]^3-360*x[3]*x[4]+2*x[3]-2
g4 <- -180*x[3]^2+200.2*x[4]+19.8*x[2]-40
return(c(g1,g2,g3,g4))
}
wood.f <- function(x){
res <- 100*(x[1]^2-x[2])^2+(1-x[1])^2+90*(x[3]^2-x[4])^2+(1-x[3])^2+
10.1*((1-x[2])^2+(1-x[4])^2)+19.8*(1-x[2])*(1-x[4])
return(res)
}
wood.h <- function(x){
h11 <- 1200*x[1]^2-400*x[2]+2;    h12 <- -400*x[1]; h13 <- h14 <- 0
h22 <- 220.2; h23 <- 0;    h24 <- 19.8
h33 <- 1080*x[3]^2-360*x[4]+2;    h34 <- -360*x[3]
h44 <- 200.2
H <- matrix(c(h11,h12,h13,h14,h12,h22,h23,h24,
h13,h23,h33,h34,h14,h24,h34,h44),ncol=4)
return(H)
}
wdefault <- gradmin(x0, fn=f, gr=gr, hess=h, control=list(trace=TRUE))
wdefault <- gradminu(x0, fn=f, gr=gr, hess=h, control=list(trace=TRUE))
x0w <- c(-3, -1, -3, -1)
wdefault <- gradminu(x0w, fn=wood.f, gr=wood.g, hess=wood.h, control=list(trace=TRUE))
source('~/rsvnall/optimizer/pkg/gradmin/R/gradminu.R')
source('~/rsvnall/optimizer/pkg/gradmin/R/lsback.R')
source('~/rsvnall/optimizer/pkg/gradmin/R/gradminu.R')
f <- function(x){
return(100*(x[2] - x[1]*x[1])^2 + (1-x[1])^2)
}
gr <- function(x){
return(c(-400*x[1]*(x[2] - x[1]*x[1]) - 2*(1-x[1]), 200*(x[2] - x[1]*x[1])))
}
h <- function(x) {
a11 <- 2 - 400*x[2] + 1200*x[1]*x[1]; a21 <- -400*x[1]
return(matrix(c(a11, a21, a21, 200), 2, 2))
}
fg <- function(x){ #function and gradient
val <- f(x)
attr(val,"gradient") <- gr(x)
val
}
fgh <- function(x){ #function and gradient
val <- f(x)
attr(val,"gradient") <- gr(x)
attr(val,"hessian") <- h(x)
val
}
x0 <- c(-1.2, 1)
sdefault <- gradminu(x0, fn=f, gr=gr, hess=h, control=list(trace=TRUE))
print(sdefault)
library(pracma)
install.packages("pracma")
library(pracma)
?fminbnd
source('/home/smnt/j6/home/john/rsvnall/optimizer/pkg/gradmin/R/gradminu.R')
source('/home/smnt/j6/home/john/rsvnall/optimizer/pkg/gradmin/R/lsback.R')
f <- function(x){
return(100*(x[2] - x[1]*x[1])^2 + (1-x[1])^2)
}
gr <- function(x){
return(c(-400*x[1]*(x[2] - x[1]*x[1]) - 2*(1-x[1]), 200*(x[2] - x[1]*x[1])))
}
h <- function(x) {
a11 <- 2 - 400*x[2] + 1200*x[1]*x[1]; a21 <- -400*x[1]
return(matrix(c(a11, a21, a21, 200), 2, 2))
}
fg <- function(x){ #function and gradient
val <- f(x)
attr(val,"gradient") <- gr(x)
val
}
fgh <- function(x){ #function and gradient
val <- f(x)
attr(val,"gradient") <- gr(x)
attr(val,"hessian") <- h(x)
val
}
x0 <- c(-1.2, 1)
sdefault <- gradminu(x0, fn=f, gr=gr, hess=h, control=list(trace=TRUE))
source('/home/smnt/j6/home/john/rsvnall/optimizer/pkg/gradmin/R/gradminu.R')
sdefault <- gradminu(x0, fn=f, gr=gr, hess=h, control=list(trace=TRUE))
sdefault <- gradminu(x0, fn=f, gr=gr, hess=h, control=list(trace=TRUE))
